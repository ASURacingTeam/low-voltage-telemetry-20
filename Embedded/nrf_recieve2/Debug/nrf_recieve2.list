
nrf_recieve2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08002ba8  08002ba8  00012ba8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  20000070  08003188  00020070  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200001f4  08003188  000201f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000111d5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002399  00000000  00000000  0003126e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004566  00000000  00000000  00033607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a8  00000000  00000000  00037b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a70  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004515  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002cd0  00000000  00000000  0003d39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004006d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ba4  00000000  00000000  000400ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b90 	.word	0x08002b90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b90 	.word	0x08002b90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800015c:	4b08      	ldr	r3, [pc, #32]	; (8000180 <HAL_InitTick+0x24>)
{
 800015e:	b510      	push	{r4, lr}
 8000160:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000162:	6818      	ldr	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb0 f0f3 	udiv	r0, r0, r3
 800016c:	f000 f880 	bl	8000270 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000170:	2200      	movs	r2, #0
 8000172:	4621      	mov	r1, r4
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f846 	bl	8000208 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}
 8000180:	20000008 	.word	0x20000008

08000184 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000184:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <HAL_Init+0x20>)
{
 8000186:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000188:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800018c:	f043 0310 	orr.w	r3, r3, #16
 8000190:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000192:	f000 f827 	bl	80001e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000196:	2000      	movs	r0, #0
 8000198:	f7ff ffe0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 800019c:	f001 ff88 	bl	80020b0 <HAL_MspInit>
}
 80001a0:	2000      	movs	r0, #0
 80001a2:	bd08      	pop	{r3, pc}
 80001a4:	40022000 	.word	0x40022000

080001a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001a8:	4a02      	ldr	r2, [pc, #8]	; (80001b4 <HAL_IncTick+0xc>)
 80001aa:	6813      	ldr	r3, [r2, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	6013      	str	r3, [r2, #0]
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000144 	.word	0x20000144

080001b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001b8:	4b01      	ldr	r3, [pc, #4]	; (80001c0 <HAL_GetTick+0x8>)
 80001ba:	6818      	ldr	r0, [r3, #0]
}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000144 	.word	0x20000144

080001c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001c6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001c8:	f7ff fff6 	bl	80001b8 <HAL_GetTick>
 80001cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001ce:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001d0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001d2:	bf18      	it	ne
 80001d4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001d6:	f7ff ffef 	bl	80001b8 <HAL_GetTick>
 80001da:	1b40      	subs	r0, r0, r5
 80001dc:	42a0      	cmp	r0, r4
 80001de:	d3fa      	bcc.n	80001d6 <HAL_Delay+0x12>
  {
  }
}
 80001e0:	b003      	add	sp, #12
 80001e2:	bd30      	pop	{r4, r5, pc}

080001e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	4a07      	ldr	r2, [pc, #28]	; (8000204 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001f2:	041b      	lsls	r3, r3, #16
 80001f4:	0c1b      	lsrs	r3, r3, #16
 80001f6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000200:	60d3      	str	r3, [r2, #12]
 8000202:	4770      	bx	lr
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800020a:	b530      	push	{r4, r5, lr}
 800020c:	68dc      	ldr	r4, [r3, #12]
 800020e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000212:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	2b04      	cmp	r3, #4
 800021a:	bf28      	it	cs
 800021c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000224:	bf98      	it	ls
 8000226:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	fa05 f303 	lsl.w	r3, r5, r3
 800022c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000230:	bf88      	it	hi
 8000232:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000234:	4019      	ands	r1, r3
 8000236:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000238:	fa05 f404 	lsl.w	r4, r5, r4
 800023c:	3c01      	subs	r4, #1
 800023e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000240:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000242:	ea42 0201 	orr.w	r2, r2, r1
 8000246:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	bfaf      	iteee	ge
 800024c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	4b06      	ldrlt	r3, [pc, #24]	; (800026c <HAL_NVIC_SetPriority+0x64>)
 8000252:	f000 000f 	andlt.w	r0, r0, #15
 8000256:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	bfa5      	ittet	ge
 800025a:	b2d2      	uxtbge	r2, r2
 800025c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000266:	bd30      	pop	{r4, r5, pc}
 8000268:	e000ed00 	.word	0xe000ed00
 800026c:	e000ed14 	.word	0xe000ed14

08000270 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000270:	3801      	subs	r0, #1
 8000272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000276:	d20a      	bcs.n	800028e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000288:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800028e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000e010 	.word	0xe000e010
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800029c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002a0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002a2:	4616      	mov	r6, r2
 80002a4:	4b65      	ldr	r3, [pc, #404]	; (800043c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002a6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800044c <HAL_GPIO_Init+0x1b0>
 80002aa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000450 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ae:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002b2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002b4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002b8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002bc:	45a0      	cmp	r8, r4
 80002be:	d17f      	bne.n	80003c0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002c0:	684d      	ldr	r5, [r1, #4]
 80002c2:	2d12      	cmp	r5, #18
 80002c4:	f000 80af 	beq.w	8000426 <HAL_GPIO_Init+0x18a>
 80002c8:	f200 8088 	bhi.w	80003dc <HAL_GPIO_Init+0x140>
 80002cc:	2d02      	cmp	r5, #2
 80002ce:	f000 80a7 	beq.w	8000420 <HAL_GPIO_Init+0x184>
 80002d2:	d87c      	bhi.n	80003ce <HAL_GPIO_Init+0x132>
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	f000 808e 	beq.w	80003f6 <HAL_GPIO_Init+0x15a>
 80002da:	2d01      	cmp	r5, #1
 80002dc:	f000 809e 	beq.w	800041c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002e0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002e4:	2cff      	cmp	r4, #255	; 0xff
 80002e6:	bf93      	iteet	ls
 80002e8:	4682      	movls	sl, r0
 80002ea:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002ee:	3d08      	subhi	r5, #8
 80002f0:	f8d0 b000 	ldrls.w	fp, [r0]
 80002f4:	bf92      	itee	ls
 80002f6:	00b5      	lslls	r5, r6, #2
 80002f8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002fc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002fe:	fa09 f805 	lsl.w	r8, r9, r5
 8000302:	ea2b 0808 	bic.w	r8, fp, r8
 8000306:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030a:	bf88      	it	hi
 800030c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000310:	ea48 0505 	orr.w	r5, r8, r5
 8000314:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000318:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800031c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000320:	d04e      	beq.n	80003c0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000322:	4d47      	ldr	r5, [pc, #284]	; (8000440 <HAL_GPIO_Init+0x1a4>)
 8000324:	4f46      	ldr	r7, [pc, #280]	; (8000440 <HAL_GPIO_Init+0x1a4>)
 8000326:	69ad      	ldr	r5, [r5, #24]
 8000328:	f026 0803 	bic.w	r8, r6, #3
 800032c:	f045 0501 	orr.w	r5, r5, #1
 8000330:	61bd      	str	r5, [r7, #24]
 8000332:	69bd      	ldr	r5, [r7, #24]
 8000334:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000338:	f005 0501 	and.w	r5, r5, #1
 800033c:	9501      	str	r5, [sp, #4]
 800033e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000342:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000346:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000348:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800034c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000350:	fa09 f90b 	lsl.w	r9, r9, fp
 8000354:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000358:	4d3a      	ldr	r5, [pc, #232]	; (8000444 <HAL_GPIO_Init+0x1a8>)
 800035a:	42a8      	cmp	r0, r5
 800035c:	d068      	beq.n	8000430 <HAL_GPIO_Init+0x194>
 800035e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000362:	42a8      	cmp	r0, r5
 8000364:	d066      	beq.n	8000434 <HAL_GPIO_Init+0x198>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	d064      	beq.n	8000438 <HAL_GPIO_Init+0x19c>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	bf0c      	ite	eq
 8000376:	2503      	moveq	r5, #3
 8000378:	2504      	movne	r5, #4
 800037a:	fa05 f50b 	lsl.w	r5, r5, fp
 800037e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000382:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000386:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000388:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 800038c:	bf14      	ite	ne
 800038e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000390:	43a5      	biceq	r5, r4
 8000392:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000394:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000396:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800039a:	bf14      	ite	ne
 800039c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800039e:	43a5      	biceq	r5, r4
 80003a0:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003a2:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003a4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003b0:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003b2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003b6:	bf14      	ite	ne
 80003b8:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003ba:	ea25 0404 	biceq.w	r4, r5, r4
 80003be:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003c0:	3601      	adds	r6, #1
 80003c2:	2e10      	cmp	r6, #16
 80003c4:	f47f af73 	bne.w	80002ae <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003c8:	b003      	add	sp, #12
 80003ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ce:	2d03      	cmp	r5, #3
 80003d0:	d022      	beq.n	8000418 <HAL_GPIO_Init+0x17c>
 80003d2:	2d11      	cmp	r5, #17
 80003d4:	d184      	bne.n	80002e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003d6:	68ca      	ldr	r2, [r1, #12]
 80003d8:	3204      	adds	r2, #4
          break;
 80003da:	e781      	b.n	80002e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003dc:	4f1a      	ldr	r7, [pc, #104]	; (8000448 <HAL_GPIO_Init+0x1ac>)
 80003de:	42bd      	cmp	r5, r7
 80003e0:	d009      	beq.n	80003f6 <HAL_GPIO_Init+0x15a>
 80003e2:	d812      	bhi.n	800040a <HAL_GPIO_Init+0x16e>
 80003e4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000454 <HAL_GPIO_Init+0x1b8>
 80003e8:	454d      	cmp	r5, r9
 80003ea:	d004      	beq.n	80003f6 <HAL_GPIO_Init+0x15a>
 80003ec:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003f0:	454d      	cmp	r5, r9
 80003f2:	f47f af75 	bne.w	80002e0 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003f6:	688a      	ldr	r2, [r1, #8]
 80003f8:	b1c2      	cbz	r2, 800042c <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003fa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003fc:	bf0c      	ite	eq
 80003fe:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000402:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000406:	2208      	movs	r2, #8
 8000408:	e76a      	b.n	80002e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800040a:	4575      	cmp	r5, lr
 800040c:	d0f3      	beq.n	80003f6 <HAL_GPIO_Init+0x15a>
 800040e:	4565      	cmp	r5, ip
 8000410:	d0f1      	beq.n	80003f6 <HAL_GPIO_Init+0x15a>
 8000412:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000458 <HAL_GPIO_Init+0x1bc>
 8000416:	e7eb      	b.n	80003f0 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000418:	2200      	movs	r2, #0
 800041a:	e761      	b.n	80002e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800041c:	68ca      	ldr	r2, [r1, #12]
          break;
 800041e:	e75f      	b.n	80002e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000420:	68ca      	ldr	r2, [r1, #12]
 8000422:	3208      	adds	r2, #8
          break;
 8000424:	e75c      	b.n	80002e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000426:	68ca      	ldr	r2, [r1, #12]
 8000428:	320c      	adds	r2, #12
          break;
 800042a:	e759      	b.n	80002e0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800042c:	2204      	movs	r2, #4
 800042e:	e757      	b.n	80002e0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000430:	2500      	movs	r5, #0
 8000432:	e7a2      	b.n	800037a <HAL_GPIO_Init+0xde>
 8000434:	2501      	movs	r5, #1
 8000436:	e7a0      	b.n	800037a <HAL_GPIO_Init+0xde>
 8000438:	2502      	movs	r5, #2
 800043a:	e79e      	b.n	800037a <HAL_GPIO_Init+0xde>
 800043c:	40010400 	.word	0x40010400
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800
 8000448:	10210000 	.word	0x10210000
 800044c:	10310000 	.word	0x10310000
 8000450:	10320000 	.word	0x10320000
 8000454:	10110000 	.word	0x10110000
 8000458:	10220000 	.word	0x10220000

0800045c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800045c:	b10a      	cbz	r2, 8000462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800045e:	6101      	str	r1, [r0, #16]
 8000460:	4770      	bx	lr
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	e7fb      	b.n	800045e <HAL_GPIO_WritePin+0x2>
	...

08000468 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000468:	6803      	ldr	r3, [r0, #0]
{
 800046a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800046e:	07db      	lsls	r3, r3, #31
{
 8000470:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000472:	d410      	bmi.n	8000496 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000474:	682b      	ldr	r3, [r5, #0]
 8000476:	079f      	lsls	r7, r3, #30
 8000478:	d45e      	bmi.n	8000538 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800047a:	682b      	ldr	r3, [r5, #0]
 800047c:	0719      	lsls	r1, r3, #28
 800047e:	f100 8095 	bmi.w	80005ac <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000482:	682b      	ldr	r3, [r5, #0]
 8000484:	075a      	lsls	r2, r3, #29
 8000486:	f100 80bf 	bmi.w	8000608 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800048a:	69ea      	ldr	r2, [r5, #28]
 800048c:	2a00      	cmp	r2, #0
 800048e:	f040 812d 	bne.w	80006ec <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000492:	2000      	movs	r0, #0
 8000494:	e014      	b.n	80004c0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000496:	4c90      	ldr	r4, [pc, #576]	; (80006d8 <HAL_RCC_OscConfig+0x270>)
 8000498:	6863      	ldr	r3, [r4, #4]
 800049a:	f003 030c 	and.w	r3, r3, #12
 800049e:	2b04      	cmp	r3, #4
 80004a0:	d007      	beq.n	80004b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004a2:	6863      	ldr	r3, [r4, #4]
 80004a4:	f003 030c 	and.w	r3, r3, #12
 80004a8:	2b08      	cmp	r3, #8
 80004aa:	d10c      	bne.n	80004c6 <HAL_RCC_OscConfig+0x5e>
 80004ac:	6863      	ldr	r3, [r4, #4]
 80004ae:	03de      	lsls	r6, r3, #15
 80004b0:	d509      	bpl.n	80004c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004b2:	6823      	ldr	r3, [r4, #0]
 80004b4:	039c      	lsls	r4, r3, #14
 80004b6:	d5dd      	bpl.n	8000474 <HAL_RCC_OscConfig+0xc>
 80004b8:	686b      	ldr	r3, [r5, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1da      	bne.n	8000474 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004be:	2001      	movs	r0, #1
}
 80004c0:	b002      	add	sp, #8
 80004c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004c6:	686b      	ldr	r3, [r5, #4]
 80004c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004cc:	d110      	bne.n	80004f0 <HAL_RCC_OscConfig+0x88>
 80004ce:	6823      	ldr	r3, [r4, #0]
 80004d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004d6:	f7ff fe6f 	bl	80001b8 <HAL_GetTick>
 80004da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004dc:	6823      	ldr	r3, [r4, #0]
 80004de:	0398      	lsls	r0, r3, #14
 80004e0:	d4c8      	bmi.n	8000474 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004e2:	f7ff fe69 	bl	80001b8 <HAL_GetTick>
 80004e6:	1b80      	subs	r0, r0, r6
 80004e8:	2864      	cmp	r0, #100	; 0x64
 80004ea:	d9f7      	bls.n	80004dc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004ec:	2003      	movs	r0, #3
 80004ee:	e7e7      	b.n	80004c0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004f0:	b99b      	cbnz	r3, 800051a <HAL_RCC_OscConfig+0xb2>
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004f8:	6023      	str	r3, [r4, #0]
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000500:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000502:	f7ff fe59 	bl	80001b8 <HAL_GetTick>
 8000506:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	0399      	lsls	r1, r3, #14
 800050c:	d5b2      	bpl.n	8000474 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800050e:	f7ff fe53 	bl	80001b8 <HAL_GetTick>
 8000512:	1b80      	subs	r0, r0, r6
 8000514:	2864      	cmp	r0, #100	; 0x64
 8000516:	d9f7      	bls.n	8000508 <HAL_RCC_OscConfig+0xa0>
 8000518:	e7e8      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800051a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800051e:	6823      	ldr	r3, [r4, #0]
 8000520:	d103      	bne.n	800052a <HAL_RCC_OscConfig+0xc2>
 8000522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000526:	6023      	str	r3, [r4, #0]
 8000528:	e7d1      	b.n	80004ce <HAL_RCC_OscConfig+0x66>
 800052a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052e:	6023      	str	r3, [r4, #0]
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000536:	e7cd      	b.n	80004d4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000538:	4c67      	ldr	r4, [pc, #412]	; (80006d8 <HAL_RCC_OscConfig+0x270>)
 800053a:	6863      	ldr	r3, [r4, #4]
 800053c:	f013 0f0c 	tst.w	r3, #12
 8000540:	d007      	beq.n	8000552 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000542:	6863      	ldr	r3, [r4, #4]
 8000544:	f003 030c 	and.w	r3, r3, #12
 8000548:	2b08      	cmp	r3, #8
 800054a:	d110      	bne.n	800056e <HAL_RCC_OscConfig+0x106>
 800054c:	6863      	ldr	r3, [r4, #4]
 800054e:	03da      	lsls	r2, r3, #15
 8000550:	d40d      	bmi.n	800056e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	079b      	lsls	r3, r3, #30
 8000556:	d502      	bpl.n	800055e <HAL_RCC_OscConfig+0xf6>
 8000558:	692b      	ldr	r3, [r5, #16]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1af      	bne.n	80004be <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	696a      	ldr	r2, [r5, #20]
 8000562:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000566:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800056a:	6023      	str	r3, [r4, #0]
 800056c:	e785      	b.n	800047a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800056e:	692a      	ldr	r2, [r5, #16]
 8000570:	4b5a      	ldr	r3, [pc, #360]	; (80006dc <HAL_RCC_OscConfig+0x274>)
 8000572:	b16a      	cbz	r2, 8000590 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000578:	f7ff fe1e 	bl	80001b8 <HAL_GetTick>
 800057c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	079f      	lsls	r7, r3, #30
 8000582:	d4ec      	bmi.n	800055e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000584:	f7ff fe18 	bl	80001b8 <HAL_GetTick>
 8000588:	1b80      	subs	r0, r0, r6
 800058a:	2802      	cmp	r0, #2
 800058c:	d9f7      	bls.n	800057e <HAL_RCC_OscConfig+0x116>
 800058e:	e7ad      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000590:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000592:	f7ff fe11 	bl	80001b8 <HAL_GetTick>
 8000596:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	0798      	lsls	r0, r3, #30
 800059c:	f57f af6d 	bpl.w	800047a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a0:	f7ff fe0a 	bl	80001b8 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	2802      	cmp	r0, #2
 80005a8:	d9f6      	bls.n	8000598 <HAL_RCC_OscConfig+0x130>
 80005aa:	e79f      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005ac:	69aa      	ldr	r2, [r5, #24]
 80005ae:	4c4a      	ldr	r4, [pc, #296]	; (80006d8 <HAL_RCC_OscConfig+0x270>)
 80005b0:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <HAL_RCC_OscConfig+0x278>)
 80005b2:	b1da      	cbz	r2, 80005ec <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005b8:	f7ff fdfe 	bl	80001b8 <HAL_GetTick>
 80005bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005c0:	079b      	lsls	r3, r3, #30
 80005c2:	d50d      	bpl.n	80005e0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005c8:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <HAL_RCC_OscConfig+0x27c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80005d0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005d4:	9b01      	ldr	r3, [sp, #4]
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f9      	bne.n	80005d2 <HAL_RCC_OscConfig+0x16a>
 80005de:	e750      	b.n	8000482 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdea 	bl	80001b8 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9e9      	bls.n	80005be <HAL_RCC_OscConfig+0x156>
 80005ea:	e77f      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ee:	f7ff fde3 	bl	80001b8 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f6:	079f      	lsls	r7, r3, #30
 80005f8:	f57f af43 	bpl.w	8000482 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005fc:	f7ff fddc 	bl	80001b8 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9f6      	bls.n	80005f4 <HAL_RCC_OscConfig+0x18c>
 8000606:	e771      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000608:	4c33      	ldr	r4, [pc, #204]	; (80006d8 <HAL_RCC_OscConfig+0x270>)
 800060a:	69e3      	ldr	r3, [r4, #28]
 800060c:	00d8      	lsls	r0, r3, #3
 800060e:	d424      	bmi.n	800065a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000610:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	69e3      	ldr	r3, [r4, #28]
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	61e3      	str	r3, [r4, #28]
 800061a:	69e3      	ldr	r3, [r4, #28]
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000624:	4e30      	ldr	r6, [pc, #192]	; (80006e8 <HAL_RCC_OscConfig+0x280>)
 8000626:	6833      	ldr	r3, [r6, #0]
 8000628:	05d9      	lsls	r1, r3, #23
 800062a:	d518      	bpl.n	800065e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800062c:	68eb      	ldr	r3, [r5, #12]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d126      	bne.n	8000680 <HAL_RCC_OscConfig+0x218>
 8000632:	6a23      	ldr	r3, [r4, #32]
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800063a:	f7ff fdbd 	bl	80001b8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800063e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000642:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000644:	6a23      	ldr	r3, [r4, #32]
 8000646:	079b      	lsls	r3, r3, #30
 8000648:	d53f      	bpl.n	80006ca <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800064a:	2f00      	cmp	r7, #0
 800064c:	f43f af1d 	beq.w	800048a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000650:	69e3      	ldr	r3, [r4, #28]
 8000652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000656:	61e3      	str	r3, [r4, #28]
 8000658:	e717      	b.n	800048a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800065a:	2700      	movs	r7, #0
 800065c:	e7e2      	b.n	8000624 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800065e:	6833      	ldr	r3, [r6, #0]
 8000660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000664:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000666:	f7ff fda7 	bl	80001b8 <HAL_GetTick>
 800066a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800066c:	6833      	ldr	r3, [r6, #0]
 800066e:	05da      	lsls	r2, r3, #23
 8000670:	d4dc      	bmi.n	800062c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000672:	f7ff fda1 	bl	80001b8 <HAL_GetTick>
 8000676:	eba0 0008 	sub.w	r0, r0, r8
 800067a:	2864      	cmp	r0, #100	; 0x64
 800067c:	d9f6      	bls.n	800066c <HAL_RCC_OscConfig+0x204>
 800067e:	e735      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000680:	b9ab      	cbnz	r3, 80006ae <HAL_RCC_OscConfig+0x246>
 8000682:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000684:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	6223      	str	r3, [r4, #32]
 800068e:	6a23      	ldr	r3, [r4, #32]
 8000690:	f023 0304 	bic.w	r3, r3, #4
 8000694:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000696:	f7ff fd8f 	bl	80001b8 <HAL_GetTick>
 800069a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800069c:	6a23      	ldr	r3, [r4, #32]
 800069e:	0798      	lsls	r0, r3, #30
 80006a0:	d5d3      	bpl.n	800064a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a2:	f7ff fd89 	bl	80001b8 <HAL_GetTick>
 80006a6:	1b80      	subs	r0, r0, r6
 80006a8:	4540      	cmp	r0, r8
 80006aa:	d9f7      	bls.n	800069c <HAL_RCC_OscConfig+0x234>
 80006ac:	e71e      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	6a23      	ldr	r3, [r4, #32]
 80006b2:	d103      	bne.n	80006bc <HAL_RCC_OscConfig+0x254>
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6223      	str	r3, [r4, #32]
 80006ba:	e7ba      	b.n	8000632 <HAL_RCC_OscConfig+0x1ca>
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6223      	str	r3, [r4, #32]
 80006c2:	6a23      	ldr	r3, [r4, #32]
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	e7b6      	b.n	8000638 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ca:	f7ff fd75 	bl	80001b8 <HAL_GetTick>
 80006ce:	eba0 0008 	sub.w	r0, r0, r8
 80006d2:	42b0      	cmp	r0, r6
 80006d4:	d9b6      	bls.n	8000644 <HAL_RCC_OscConfig+0x1dc>
 80006d6:	e709      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
 80006d8:	40021000 	.word	0x40021000
 80006dc:	42420000 	.word	0x42420000
 80006e0:	42420480 	.word	0x42420480
 80006e4:	20000008 	.word	0x20000008
 80006e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006ec:	4c22      	ldr	r4, [pc, #136]	; (8000778 <HAL_RCC_OscConfig+0x310>)
 80006ee:	6863      	ldr	r3, [r4, #4]
 80006f0:	f003 030c 	and.w	r3, r3, #12
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	f43f aee2 	beq.w	80004be <HAL_RCC_OscConfig+0x56>
 80006fa:	2300      	movs	r3, #0
 80006fc:	4e1f      	ldr	r6, [pc, #124]	; (800077c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000700:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000702:	d12b      	bne.n	800075c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000704:	f7ff fd58 	bl	80001b8 <HAL_GetTick>
 8000708:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	0199      	lsls	r1, r3, #6
 800070e:	d41f      	bmi.n	8000750 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000710:	6a2b      	ldr	r3, [r5, #32]
 8000712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000716:	d105      	bne.n	8000724 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000718:	6862      	ldr	r2, [r4, #4]
 800071a:	68a9      	ldr	r1, [r5, #8]
 800071c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000720:	430a      	orrs	r2, r1
 8000722:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000724:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000726:	6862      	ldr	r2, [r4, #4]
 8000728:	430b      	orrs	r3, r1
 800072a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800072e:	4313      	orrs	r3, r2
 8000730:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000732:	2301      	movs	r3, #1
 8000734:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000736:	f7ff fd3f 	bl	80001b8 <HAL_GetTick>
 800073a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	019a      	lsls	r2, r3, #6
 8000740:	f53f aea7 	bmi.w	8000492 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000744:	f7ff fd38 	bl	80001b8 <HAL_GetTick>
 8000748:	1b40      	subs	r0, r0, r5
 800074a:	2802      	cmp	r0, #2
 800074c:	d9f6      	bls.n	800073c <HAL_RCC_OscConfig+0x2d4>
 800074e:	e6cd      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000750:	f7ff fd32 	bl	80001b8 <HAL_GetTick>
 8000754:	1bc0      	subs	r0, r0, r7
 8000756:	2802      	cmp	r0, #2
 8000758:	d9d7      	bls.n	800070a <HAL_RCC_OscConfig+0x2a2>
 800075a:	e6c7      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800075c:	f7ff fd2c 	bl	80001b8 <HAL_GetTick>
 8000760:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	f57f ae94 	bpl.w	8000492 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800076a:	f7ff fd25 	bl	80001b8 <HAL_GetTick>
 800076e:	1b40      	subs	r0, r0, r5
 8000770:	2802      	cmp	r0, #2
 8000772:	d9f6      	bls.n	8000762 <HAL_RCC_OscConfig+0x2fa>
 8000774:	e6ba      	b.n	80004ec <HAL_RCC_OscConfig+0x84>
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	42420060 	.word	0x42420060

08000780 <HAL_RCC_GetSysClockFreq>:
{
 8000780:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000784:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000786:	ac02      	add	r4, sp, #8
 8000788:	f103 0510 	add.w	r5, r3, #16
 800078c:	4622      	mov	r2, r4
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	6859      	ldr	r1, [r3, #4]
 8000792:	3308      	adds	r3, #8
 8000794:	c203      	stmia	r2!, {r0, r1}
 8000796:	42ab      	cmp	r3, r5
 8000798:	4614      	mov	r4, r2
 800079a:	d1f7      	bne.n	800078c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800079c:	2301      	movs	r3, #1
 800079e:	f88d 3004 	strb.w	r3, [sp, #4]
 80007a2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007a4:	4912      	ldr	r1, [pc, #72]	; (80007f0 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007a6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007aa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007ac:	f003 020c 	and.w	r2, r3, #12
 80007b0:	2a08      	cmp	r2, #8
 80007b2:	d118      	bne.n	80007e6 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007b8:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ba:	bf48      	it	mi
 80007bc:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007be:	a806      	add	r0, sp, #24
 80007c0:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c2:	bf48      	it	mi
 80007c4:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007c8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007cc:	bf41      	itttt	mi
 80007ce:	aa06      	addmi	r2, sp, #24
 80007d0:	189b      	addmi	r3, r3, r2
 80007d2:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007d6:	4b07      	ldrmi	r3, [pc, #28]	; (80007f4 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007d8:	bf54      	ite	pl
 80007da:	4b07      	ldrpl	r3, [pc, #28]	; (80007f8 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007dc:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007e0:	4358      	muls	r0, r3
}
 80007e2:	b007      	add	sp, #28
 80007e4:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80007e8:	e7fb      	b.n	80007e2 <HAL_RCC_GetSysClockFreq+0x62>
 80007ea:	bf00      	nop
 80007ec:	08002ba8 	.word	0x08002ba8
 80007f0:	40021000 	.word	0x40021000
 80007f4:	007a1200 	.word	0x007a1200
 80007f8:	003d0900 	.word	0x003d0900

080007fc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007fc:	4a4d      	ldr	r2, [pc, #308]	; (8000934 <HAL_RCC_ClockConfig+0x138>)
{
 80007fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000802:	6813      	ldr	r3, [r2, #0]
{
 8000804:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	428b      	cmp	r3, r1
{
 800080c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800080e:	d328      	bcc.n	8000862 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000810:	682a      	ldr	r2, [r5, #0]
 8000812:	0791      	lsls	r1, r2, #30
 8000814:	d432      	bmi.n	800087c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000816:	07d2      	lsls	r2, r2, #31
 8000818:	d438      	bmi.n	800088c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <HAL_RCC_ClockConfig+0x138>)
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	429e      	cmp	r6, r3
 8000824:	d373      	bcc.n	800090e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000826:	682a      	ldr	r2, [r5, #0]
 8000828:	4c43      	ldr	r4, [pc, #268]	; (8000938 <HAL_RCC_ClockConfig+0x13c>)
 800082a:	f012 0f04 	tst.w	r2, #4
 800082e:	d179      	bne.n	8000924 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000830:	0713      	lsls	r3, r2, #28
 8000832:	d506      	bpl.n	8000842 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	692a      	ldr	r2, [r5, #16]
 8000838:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800083c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000840:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000842:	f7ff ff9d 	bl	8000780 <HAL_RCC_GetSysClockFreq>
 8000846:	6863      	ldr	r3, [r4, #4]
 8000848:	4a3c      	ldr	r2, [pc, #240]	; (800093c <HAL_RCC_ClockConfig+0x140>)
 800084a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800084e:	5cd3      	ldrb	r3, [r2, r3]
 8000850:	40d8      	lsrs	r0, r3
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <HAL_RCC_ClockConfig+0x144>)
 8000854:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fc80 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 800085c:	2000      	movs	r0, #0
}
 800085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	f023 0307 	bic.w	r3, r3, #7
 8000868:	430b      	orrs	r3, r1
 800086a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	4299      	cmp	r1, r3
 8000874:	d0cc      	beq.n	8000810 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000876:	2001      	movs	r0, #1
 8000878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800087c:	492e      	ldr	r1, [pc, #184]	; (8000938 <HAL_RCC_ClockConfig+0x13c>)
 800087e:	68a8      	ldr	r0, [r5, #8]
 8000880:	684b      	ldr	r3, [r1, #4]
 8000882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000886:	4303      	orrs	r3, r0
 8000888:	604b      	str	r3, [r1, #4]
 800088a:	e7c4      	b.n	8000816 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800088c:	686a      	ldr	r2, [r5, #4]
 800088e:	4c2a      	ldr	r4, [pc, #168]	; (8000938 <HAL_RCC_ClockConfig+0x13c>)
 8000890:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000894:	d11c      	bne.n	80008d0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000896:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800089a:	d0ec      	beq.n	8000876 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800089c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800089e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008aa:	f7ff fc85 	bl	80001b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ae:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008b0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d114      	bne.n	80008e0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008b6:	6863      	ldr	r3, [r4, #4]
 80008b8:	f003 030c 	and.w	r3, r3, #12
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d0ac      	beq.n	800081a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c0:	f7ff fc7a 	bl	80001b8 <HAL_GetTick>
 80008c4:	1bc0      	subs	r0, r0, r7
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d9f5      	bls.n	80008b6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008ca:	2003      	movs	r0, #3
 80008cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008d0:	2a02      	cmp	r2, #2
 80008d2:	d102      	bne.n	80008da <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008d8:	e7df      	b.n	800089a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008da:	f013 0f02 	tst.w	r3, #2
 80008de:	e7dc      	b.n	800089a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d10f      	bne.n	8000904 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008e4:	6863      	ldr	r3, [r4, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d095      	beq.n	800081a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ee:	f7ff fc63 	bl	80001b8 <HAL_GetTick>
 80008f2:	1bc0      	subs	r0, r0, r7
 80008f4:	4540      	cmp	r0, r8
 80008f6:	d9f5      	bls.n	80008e4 <HAL_RCC_ClockConfig+0xe8>
 80008f8:	e7e7      	b.n	80008ca <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fa:	f7ff fc5d 	bl	80001b8 <HAL_GetTick>
 80008fe:	1bc0      	subs	r0, r0, r7
 8000900:	4540      	cmp	r0, r8
 8000902:	d8e2      	bhi.n	80008ca <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	f013 0f0c 	tst.w	r3, #12
 800090a:	d1f6      	bne.n	80008fa <HAL_RCC_ClockConfig+0xfe>
 800090c:	e785      	b.n	800081a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800090e:	6813      	ldr	r3, [r2, #0]
 8000910:	f023 0307 	bic.w	r3, r3, #7
 8000914:	4333      	orrs	r3, r6
 8000916:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000918:	6813      	ldr	r3, [r2, #0]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	429e      	cmp	r6, r3
 8000920:	d1a9      	bne.n	8000876 <HAL_RCC_ClockConfig+0x7a>
 8000922:	e780      	b.n	8000826 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000924:	6863      	ldr	r3, [r4, #4]
 8000926:	68e9      	ldr	r1, [r5, #12]
 8000928:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800092c:	430b      	orrs	r3, r1
 800092e:	6063      	str	r3, [r4, #4]
 8000930:	e77e      	b.n	8000830 <HAL_RCC_ClockConfig+0x34>
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000
 8000938:	40021000 	.word	0x40021000
 800093c:	080030c3 	.word	0x080030c3
 8000940:	20000008 	.word	0x20000008

08000944 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000952:	6810      	ldr	r0, [r2, #0]
}    
 8000954:	40d8      	lsrs	r0, r3
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	080030d3 	.word	0x080030d3
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000972:	6810      	ldr	r0, [r2, #0]
} 
 8000974:	40d8      	lsrs	r0, r3
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	080030d3 	.word	0x080030d3
 8000980:	20000008 	.word	0x20000008

08000984 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000988:	4604      	mov	r4, r0
 800098a:	4688      	mov	r8, r1
 800098c:	4617      	mov	r7, r2
 800098e:	461d      	mov	r5, r3
 8000990:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000992:	6822      	ldr	r2, [r4, #0]
 8000994:	6893      	ldr	r3, [r2, #8]
 8000996:	ea38 0303 	bics.w	r3, r8, r3
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	429f      	cmp	r7, r3
 80009a2:	d102      	bne.n	80009aa <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009a4:	2000      	movs	r0, #0
}
 80009a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009aa:	1c6b      	adds	r3, r5, #1
 80009ac:	d0f2      	beq.n	8000994 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80009ae:	bb55      	cbnz	r5, 8000a06 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80009b8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80009ba:	6862      	ldr	r2, [r4, #4]
 80009bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80009c0:	d10a      	bne.n	80009d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80009c2:	68a2      	ldr	r2, [r4, #8]
 80009c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80009c8:	d002      	beq.n	80009d0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80009ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80009ce:	d103      	bne.n	80009d8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009d6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80009d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80009de:	d109      	bne.n	80009f4 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009e6:	0412      	lsls	r2, r2, #16
 80009e8:	0c12      	lsrs	r2, r2, #16
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009f2:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80009fa:	2300      	movs	r3, #0
 80009fc:	2003      	movs	r0, #3
 80009fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000a06:	f7ff fbd7 	bl	80001b8 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	4285      	cmp	r5, r0
 8000a0e:	d8c0      	bhi.n	8000992 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000a10:	e7ce      	b.n	80009b0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000a12 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a12:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a14:	460b      	mov	r3, r1
 8000a16:	9200      	str	r2, [sp, #0]
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	2200      	movs	r2, #0
{
 8000a1c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a1e:	f7ff ffb1 	bl	8000984 <SPI_WaitFlagStateUntilTimeout>
 8000a22:	b120      	cbz	r0, 8000a2e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a24:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd10      	pop	{r4, pc}

08000a32 <HAL_SPI_Init>:
{
 8000a32:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000a34:	4604      	mov	r4, r0
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d036      	beq.n	8000aa8 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000a3e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000a42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a46:	b91b      	cbnz	r3, 8000a50 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000a48:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000a4c:	f001 fb54 	bl	80020f8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000a50:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000a52:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000a54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000a58:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000a5a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a60:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000a62:	6863      	ldr	r3, [r4, #4]
 8000a64:	69a2      	ldr	r2, [r4, #24]
 8000a66:	4303      	orrs	r3, r0
 8000a68:	68e0      	ldr	r0, [r4, #12]
 8000a6a:	4303      	orrs	r3, r0
 8000a6c:	6920      	ldr	r0, [r4, #16]
 8000a6e:	4303      	orrs	r3, r0
 8000a70:	6960      	ldr	r0, [r4, #20]
 8000a72:	4303      	orrs	r3, r0
 8000a74:	69e0      	ldr	r0, [r4, #28]
 8000a76:	4303      	orrs	r3, r0
 8000a78:	6a20      	ldr	r0, [r4, #32]
 8000a7a:	4303      	orrs	r3, r0
 8000a7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000a84:	4303      	orrs	r3, r0
 8000a86:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a88:	0c12      	lsrs	r2, r2, #16
 8000a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a8c:	f002 0204 	and.w	r2, r2, #4
 8000a90:	431a      	orrs	r2, r3
 8000a92:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a94:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a96:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a9c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000a9e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000aa0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000aa2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000aa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
}
 8000aaa:	bd10      	pop	{r4, pc}

08000aac <HAL_SPI_Transmit>:
{
 8000aac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000ab0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000ab2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000ab6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000ab8:	2b01      	cmp	r3, #1
{
 8000aba:	460d      	mov	r5, r1
 8000abc:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000abe:	f000 809c 	beq.w	8000bfa <HAL_SPI_Transmit+0x14e>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ac8:	f7ff fb76 	bl	80001b8 <HAL_GetTick>
 8000acc:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000ace:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000ad2:	b2c0      	uxtb	r0, r0
 8000ad4:	2801      	cmp	r0, #1
 8000ad6:	f040 808e 	bne.w	8000bf6 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d04e      	beq.n	8000b7c <HAL_SPI_Transmit+0xd0>
 8000ade:	f1b8 0f00 	cmp.w	r8, #0
 8000ae2:	d04b      	beq.n	8000b7c <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000aee:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000af0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000af4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000af6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000af8:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000afa:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000afc:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000afe:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b04:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000b06:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000b0a:	bf02      	ittt	eq
 8000b0c:	681a      	ldreq	r2, [r3, #0]
 8000b0e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000b12:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000b18:	bf5e      	ittt	pl
 8000b1a:	681a      	ldrpl	r2, [r3, #0]
 8000b1c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000b20:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b22:	68e2      	ldr	r2, [r4, #12]
 8000b24:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000b28:	6862      	ldr	r2, [r4, #4]
 8000b2a:	d138      	bne.n	8000b9e <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000b2c:	b11a      	cbz	r2, 8000b36 <HAL_SPI_Transmit+0x8a>
 8000b2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000b30:	b292      	uxth	r2, r2
 8000b32:	2a01      	cmp	r2, #1
 8000b34:	d106      	bne.n	8000b44 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000b36:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000b3a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000b44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b993      	cbnz	r3, 8000b70 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000b4a:	9700      	str	r7, [sp, #0]
 8000b4c:	4633      	mov	r3, r6
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2102      	movs	r1, #2
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff ff16 	bl	8000984 <SPI_WaitFlagStateUntilTimeout>
 8000b58:	b978      	cbnz	r0, 8000b7a <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000b5a:	463a      	mov	r2, r7
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f7ff ff57 	bl	8000a12 <SPI_CheckFlag_BSY>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d038      	beq.n	8000bda <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b68:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b6c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8000b6e:	e005      	b.n	8000b7c <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	0790      	lsls	r0, r2, #30
 8000b76:	d4de      	bmi.n	8000b36 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b78:	b94e      	cbnz	r6, 8000b8e <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000b7a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b82:	2300      	movs	r3, #0
 8000b84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000b88:	b004      	add	sp, #16
 8000b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b8e:	1c71      	adds	r1, r6, #1
 8000b90:	d0d8      	beq.n	8000b44 <HAL_SPI_Transmit+0x98>
 8000b92:	f7ff fb11 	bl	80001b8 <HAL_GetTick>
 8000b96:	1bc0      	subs	r0, r0, r7
 8000b98:	4286      	cmp	r6, r0
 8000b9a:	d8d3      	bhi.n	8000b44 <HAL_SPI_Transmit+0x98>
 8000b9c:	e7ed      	b.n	8000b7a <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000b9e:	b11a      	cbz	r2, 8000ba8 <HAL_SPI_Transmit+0xfc>
 8000ba0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000ba2:	b292      	uxth	r2, r2
 8000ba4:	2a01      	cmp	r2, #1
 8000ba6:	d106      	bne.n	8000bb6 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000ba8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000bac:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000bae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0c5      	beq.n	8000b4a <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	0792      	lsls	r2, r2, #30
 8000bc4:	d4f0      	bmi.n	8000ba8 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0d7      	beq.n	8000b7a <HAL_SPI_Transmit+0xce>
 8000bca:	1c73      	adds	r3, r6, #1
 8000bcc:	d0f3      	beq.n	8000bb6 <HAL_SPI_Transmit+0x10a>
 8000bce:	f7ff faf3 	bl	80001b8 <HAL_GetTick>
 8000bd2:	1bc0      	subs	r0, r0, r7
 8000bd4:	4286      	cmp	r6, r0
 8000bd6:	d8ee      	bhi.n	8000bb6 <HAL_SPI_Transmit+0x10a>
 8000bd8:	e7cf      	b.n	8000b7a <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000bda:	68a3      	ldr	r3, [r4, #8]
 8000bdc:	b933      	cbnz	r3, 8000bec <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000bde:	9303      	str	r3, [sp, #12]
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	9203      	str	r2, [sp, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	9303      	str	r3, [sp, #12]
 8000bea:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000bec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000bee:	3000      	adds	r0, #0
 8000bf0:	bf18      	it	ne
 8000bf2:	2001      	movne	r0, #1
 8000bf4:	e7c2      	b.n	8000b7c <HAL_SPI_Transmit+0xd0>
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	e7c0      	b.n	8000b7c <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	e7c4      	b.n	8000b88 <HAL_SPI_Transmit+0xdc>

08000bfe <HAL_SPI_TransmitReceive>:
{
 8000bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c02:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000c04:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000c08:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000c0a:	2b01      	cmp	r3, #1
{
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4616      	mov	r6, r2
 8000c12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000c14:	f000 80ee 	beq.w	8000df4 <HAL_SPI_TransmitReceive+0x1f6>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c1e:	f7ff facb 	bl	80001b8 <HAL_GetTick>
  tmp  = hspi->State;
 8000c22:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000c26:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000c28:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000c2a:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000c2c:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000c2e:	d00a      	beq.n	8000c46 <HAL_SPI_TransmitReceive+0x48>
 8000c30:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000c34:	f040 80dc 	bne.w	8000df0 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000c38:	68a2      	ldr	r2, [r4, #8]
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 80d8 	bne.w	8000df0 <HAL_SPI_TransmitReceive+0x1f2>
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	f040 80d5 	bne.w	8000df0 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d04e      	beq.n	8000ce8 <HAL_SPI_TransmitReceive+0xea>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d04c      	beq.n	8000ce8 <HAL_SPI_TransmitReceive+0xea>
 8000c4e:	f1b9 0f00 	cmp.w	r9, #0
 8000c52:	d049      	beq.n	8000ce8 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000c54:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000c58:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000c5a:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000c5c:	bf04      	itt	eq
 8000c5e:	2305      	moveq	r3, #5
 8000c60:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000c68:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000c6a:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c6c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000c6e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000c72:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c76:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000c78:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c7c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000c7e:	bf58      	it	pl
 8000c80:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000c82:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000c84:	bf58      	it	pl
 8000c86:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000c8a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000c8e:	bf58      	it	pl
 8000c90:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c92:	68e2      	ldr	r2, [r4, #12]
 8000c94:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000c98:	d15d      	bne.n	8000d56 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c9a:	b119      	cbz	r1, 8000ca4 <HAL_SPI_TransmitReceive+0xa6>
 8000c9c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	2a01      	cmp	r2, #1
 8000ca2:	d106      	bne.n	8000cb2 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000ca4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000ca8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000caa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cac:	3b01      	subs	r3, #1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000cb2:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000cb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b9bb      	cbnz	r3, 8000cec <HAL_SPI_TransmitReceive+0xee>
 8000cbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b9a3      	cbnz	r3, 8000cec <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000cc2:	f8cd 8000 	str.w	r8, [sp]
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fe59 	bl	8000984 <SPI_WaitFlagStateUntilTimeout>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d135      	bne.n	8000d42 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	4639      	mov	r1, r7
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff fe99 	bl	8000a12 <SPI_CheckFlag_BSY>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d07a      	beq.n	8000dda <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e02b      	b.n	8000d44 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000cec:	f1b9 0f00 	cmp.w	r9, #0
 8000cf0:	d00f      	beq.n	8000d12 <HAL_SPI_TransmitReceive+0x114>
 8000cf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b163      	cbz	r3, 8000d12 <HAL_SPI_TransmitReceive+0x114>
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	0791      	lsls	r1, r2, #30
 8000cfe:	d508      	bpl.n	8000d12 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000d00:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000d04:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d08:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000d12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b163      	cbz	r3, 8000d32 <HAL_SPI_TransmitReceive+0x134>
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	07d2      	lsls	r2, r2, #31
 8000d1e:	d508      	bpl.n	8000d32 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000d20:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000d2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d32:	1c78      	adds	r0, r7, #1
 8000d34:	d0bf      	beq.n	8000cb6 <HAL_SPI_TransmitReceive+0xb8>
 8000d36:	f7ff fa3f 	bl	80001b8 <HAL_GetTick>
 8000d3a:	eba0 0008 	sub.w	r0, r0, r8
 8000d3e:	4287      	cmp	r7, r0
 8000d40:	d8b9      	bhi.n	8000cb6 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000d42:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000d50:	b005      	add	sp, #20
 8000d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000d56:	b119      	cbz	r1, 8000d60 <HAL_SPI_TransmitReceive+0x162>
 8000d58:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000d5a:	b292      	uxth	r2, r2
 8000d5c:	2a01      	cmp	r2, #1
 8000d5e:	d106      	bne.n	8000d6e <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000d60:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d64:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d6e:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	b91b      	cbnz	r3, 8000d80 <HAL_SPI_TransmitReceive+0x182>
 8000d78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0a0      	beq.n	8000cc2 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000d80:	f1b9 0f00 	cmp.w	r9, #0
 8000d84:	d00f      	beq.n	8000da6 <HAL_SPI_TransmitReceive+0x1a8>
 8000d86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b163      	cbz	r3, 8000da6 <HAL_SPI_TransmitReceive+0x1a8>
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	0791      	lsls	r1, r2, #30
 8000d92:	d508      	bpl.n	8000da6 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000d94:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000d98:	782a      	ldrb	r2, [r5, #0]
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000da0:	3b01      	subs	r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000da6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b16b      	cbz	r3, 8000dc8 <HAL_SPI_TransmitReceive+0x1ca>
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	07d2      	lsls	r2, r2, #31
 8000db2:	d509      	bpl.n	8000dc8 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000db4:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	3601      	adds	r6, #1
 8000dbc:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000dc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000dc8:	1c7b      	adds	r3, r7, #1
 8000dca:	d0d2      	beq.n	8000d72 <HAL_SPI_TransmitReceive+0x174>
 8000dcc:	f7ff f9f4 	bl	80001b8 <HAL_GetTick>
 8000dd0:	eba0 0008 	sub.w	r0, r0, r8
 8000dd4:	4287      	cmp	r7, r0
 8000dd6:	d8cc      	bhi.n	8000d72 <HAL_SPI_TransmitReceive+0x174>
 8000dd8:	e7b3      	b.n	8000d42 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000dda:	68a3      	ldr	r3, [r4, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1b1      	bne.n	8000d44 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	9003      	str	r0, [sp, #12]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	9203      	str	r2, [sp, #12]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	9303      	str	r3, [sp, #12]
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	e7a9      	b.n	8000d44 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000df0:	2002      	movs	r0, #2
 8000df2:	e7a7      	b.n	8000d44 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000df4:	2002      	movs	r0, #2
 8000df6:	e7ab      	b.n	8000d50 <HAL_SPI_TransmitReceive+0x152>

08000df8 <HAL_SPI_Receive>:
{
 8000df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000dfc:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000dfe:	6843      	ldr	r3, [r0, #4]
{
 8000e00:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000e06:	460d      	mov	r5, r1
 8000e08:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e0a:	d10c      	bne.n	8000e26 <HAL_SPI_Receive+0x2e>
 8000e0c:	6883      	ldr	r3, [r0, #8]
 8000e0e:	b953      	cbnz	r3, 8000e26 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000e10:	2304      	movs	r3, #4
 8000e12:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8000e16:	4613      	mov	r3, r2
 8000e18:	9600      	str	r6, [sp, #0]
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	f7ff feef 	bl	8000bfe <HAL_SPI_TransmitReceive>
}
 8000e20:	b002      	add	sp, #8
 8000e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8000e26:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	f000 8081 	beq.w	8000f32 <HAL_SPI_Receive+0x13a>
 8000e30:	2301      	movs	r3, #1
 8000e32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e36:	f7ff f9bf 	bl	80001b8 <HAL_GetTick>
 8000e3a:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000e3c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e40:	b2c0      	uxtb	r0, r0
 8000e42:	2801      	cmp	r0, #1
 8000e44:	d173      	bne.n	8000f2e <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d058      	beq.n	8000efc <HAL_SPI_Receive+0x104>
 8000e4a:	f1b8 0f00 	cmp.w	r8, #0
 8000e4e:	d055      	beq.n	8000efc <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000e50:	2304      	movs	r3, #4
 8000e52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8000e5a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8000e5c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8000e60:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8000e62:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8000e64:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000e66:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e68:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000e6a:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e70:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8000e72:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8000e76:	bf02      	ittt	eq
 8000e78:	681a      	ldreq	r2, [r3, #0]
 8000e7a:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8000e7e:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000e84:	bf5e      	ittt	pl
 8000e86:	681a      	ldrpl	r2, [r3, #0]
 8000e88:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000e8c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000e8e:	68e3      	ldr	r3, [r4, #12]
 8000e90:	b1cb      	cbz	r3, 8000ec6 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8000e92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b1d3      	cbz	r3, 8000ece <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	07d2      	lsls	r2, r2, #31
 8000e9e:	d53c      	bpl.n	8000f1a <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8000ea6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000eae:	e7f0      	b.n	8000e92 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	07d0      	lsls	r0, r2, #31
 8000eb6:	d51f      	bpl.n	8000ef8 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8000eb8:	7b1b      	ldrb	r3, [r3, #12]
 8000eba:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8000ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8000ec6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ece:	6863      	ldr	r3, [r4, #4]
 8000ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ed4:	d10b      	bne.n	8000eee <HAL_SPI_Receive+0xf6>
 8000ed6:	68a3      	ldr	r3, [r4, #8]
 8000ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000edc:	d002      	beq.n	8000ee4 <HAL_SPI_Receive+0xec>
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee2:	d104      	bne.n	8000eee <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eec:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000ef0:	3000      	adds	r0, #0
 8000ef2:	bf18      	it	ne
 8000ef4:	2001      	movne	r0, #1
 8000ef6:	e001      	b.n	8000efc <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ef8:	b93e      	cbnz	r6, 8000f0a <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8000efa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000f08:	e78a      	b.n	8000e20 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f0a:	1c71      	adds	r1, r6, #1
 8000f0c:	d0db      	beq.n	8000ec6 <HAL_SPI_Receive+0xce>
 8000f0e:	f7ff f953 	bl	80001b8 <HAL_GetTick>
 8000f12:	1bc0      	subs	r0, r0, r7
 8000f14:	4286      	cmp	r6, r0
 8000f16:	d8d6      	bhi.n	8000ec6 <HAL_SPI_Receive+0xce>
 8000f18:	e7ef      	b.n	8000efa <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d0ed      	beq.n	8000efa <HAL_SPI_Receive+0x102>
 8000f1e:	1c73      	adds	r3, r6, #1
 8000f20:	d0b7      	beq.n	8000e92 <HAL_SPI_Receive+0x9a>
 8000f22:	f7ff f949 	bl	80001b8 <HAL_GetTick>
 8000f26:	1bc0      	subs	r0, r0, r7
 8000f28:	4286      	cmp	r6, r0
 8000f2a:	d8b2      	bhi.n	8000e92 <HAL_SPI_Receive+0x9a>
 8000f2c:	e7e5      	b.n	8000efa <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8000f2e:	2002      	movs	r0, #2
 8000f30:	e7e4      	b.n	8000efc <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8000f32:	2002      	movs	r0, #2
 8000f34:	e774      	b.n	8000e20 <HAL_SPI_Receive+0x28>
	...

08000f38 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f3c:	6805      	ldr	r5, [r0, #0]
 8000f3e:	68c2      	ldr	r2, [r0, #12]
 8000f40:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f42:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f4c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000f4e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000f54:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000f58:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f5c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f62:	696b      	ldr	r3, [r5, #20]
 8000f64:	6982      	ldr	r2, [r0, #24]
 8000f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <UART_SetConfig+0x138>)
{
 8000f70:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000f72:	429d      	cmp	r5, r3
 8000f74:	f04f 0419 	mov.w	r4, #25
 8000f78:	d146      	bne.n	8001008 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f7a:	f7ff fcf3 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000f7e:	fb04 f300 	mul.w	r3, r4, r0
 8000f82:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f86:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f8a:	00b6      	lsls	r6, r6, #2
 8000f8c:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f90:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f94:	011e      	lsls	r6, r3, #4
 8000f96:	f7ff fce5 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000f9a:	4360      	muls	r0, r4
 8000f9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fa6:	f7ff fcdd 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000faa:	4360      	muls	r0, r4
 8000fac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fba:	fb08 7313 	mls	r3, r8, r3, r7
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	3332      	adds	r3, #50	; 0x32
 8000fc2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fc6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fca:	f7ff fccb 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000fce:	4360      	muls	r0, r4
 8000fd0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	fbb0 faf2 	udiv	sl, r0, r2
 8000fda:	f7ff fcc3 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fde:	4360      	muls	r0, r4
 8000fe0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fea:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fee:	fb08 a313 	mls	r3, r8, r3, sl
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	3332      	adds	r3, #50	; 0x32
 8000ff6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	433b      	orrs	r3, r7
 8001000:	4433      	add	r3, r6
 8001002:	60ab      	str	r3, [r5, #8]
 8001004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001008:	f7ff fc9c 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 800100c:	fb04 f300 	mul.w	r3, r4, r0
 8001010:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001014:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001018:	00b6      	lsls	r6, r6, #2
 800101a:	fbb3 f3f6 	udiv	r3, r3, r6
 800101e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001022:	011e      	lsls	r6, r3, #4
 8001024:	f7ff fc8e 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8001028:	4360      	muls	r0, r4
 800102a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fbb0 f7f3 	udiv	r7, r0, r3
 8001034:	f7ff fc86 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8001038:	4360      	muls	r0, r4
 800103a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fbb0 f3f3 	udiv	r3, r0, r3
 8001044:	fbb3 f3f8 	udiv	r3, r3, r8
 8001048:	fb08 7313 	mls	r3, r8, r3, r7
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	3332      	adds	r3, #50	; 0x32
 8001050:	fbb3 f3f8 	udiv	r3, r3, r8
 8001054:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001058:	f7ff fc74 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 800105c:	4360      	muls	r0, r4
 800105e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	fbb0 faf2 	udiv	sl, r0, r2
 8001068:	f7ff fc6c 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 800106c:	e7b7      	b.n	8000fde <UART_SetConfig+0xa6>
 800106e:	bf00      	nop
 8001070:	40013800 	.word	0x40013800

08001074 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	460e      	mov	r6, r1
 800107a:	4617      	mov	r7, r2
 800107c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800107e:	6821      	ldr	r1, [r4, #0]
 8001080:	680b      	ldr	r3, [r1, #0]
 8001082:	ea36 0303 	bics.w	r3, r6, r3
 8001086:	d101      	bne.n	800108c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001088:	2000      	movs	r0, #0
}
 800108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800108c:	1c6b      	adds	r3, r5, #1
 800108e:	d0f7      	beq.n	8001080 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001090:	b995      	cbnz	r5, 80010b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001092:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001094:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800109c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80010a6:	2320      	movs	r3, #32
 80010a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80010ac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80010b0:	2300      	movs	r3, #0
 80010b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010b8:	f7ff f87e 	bl	80001b8 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	4285      	cmp	r5, r0
 80010c0:	d2dd      	bcs.n	800107e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80010c2:	e7e6      	b.n	8001092 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080010c4 <HAL_UART_Init>:
{
 80010c4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80010c6:	4604      	mov	r4, r0
 80010c8:	b340      	cbz	r0, 800111c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80010ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010d2:	b91b      	cbnz	r3, 80010dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80010d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80010d8:	f001 f84a 	bl	8002170 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80010dc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80010de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80010e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80010e4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80010e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80010e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010ee:	f7ff ff23 	bl	8000f38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010f2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001104:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800110c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800110e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001110:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001112:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001116:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800111a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
}
 800111e:	bd10      	pop	{r4, pc}

08001120 <HAL_UART_Transmit>:
{
 8001120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001124:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001126:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800112a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800112c:	2b20      	cmp	r3, #32
{
 800112e:	460d      	mov	r5, r1
 8001130:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001132:	d14e      	bne.n	80011d2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001134:	2900      	cmp	r1, #0
 8001136:	d049      	beq.n	80011cc <HAL_UART_Transmit+0xac>
 8001138:	2a00      	cmp	r2, #0
 800113a:	d047      	beq.n	80011cc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800113c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001140:	2b01      	cmp	r3, #1
 8001142:	d046      	beq.n	80011d2 <HAL_UART_Transmit+0xb2>
 8001144:	2301      	movs	r3, #1
 8001146:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800114e:	2321      	movs	r3, #33	; 0x21
 8001150:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001154:	f7ff f830 	bl	80001b8 <HAL_GetTick>
 8001158:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800115a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800115e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001162:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001164:	b29b      	uxth	r3, r3
 8001166:	b96b      	cbnz	r3, 8001184 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4632      	mov	r2, r6
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff80 	bl	8001074 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001174:	b9a8      	cbnz	r0, 80011a2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001176:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001178:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800117c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001184:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001186:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800118e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001190:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001196:	4620      	mov	r0, r4
 8001198:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800119a:	d10e      	bne.n	80011ba <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800119c:	f7ff ff6a 	bl	8001074 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011a0:	b110      	cbz	r0, 80011a8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80011a8:	882b      	ldrh	r3, [r5, #0]
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011b0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011b2:	6923      	ldr	r3, [r4, #16]
 80011b4:	b943      	cbnz	r3, 80011c8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80011b6:	3502      	adds	r5, #2
 80011b8:	e7d3      	b.n	8001162 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011ba:	f7ff ff5b 	bl	8001074 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d1ef      	bne.n	80011a2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	782a      	ldrb	r2, [r5, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	3501      	adds	r5, #1
 80011ca:	e7ca      	b.n	8001162 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
 80011ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80011d2:	2002      	movs	r0, #2
}
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011d8 <NRF24_csn.part.0>:
}

//1. Chip Select function
void NRF24_csn(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <NRF24_csn.part.0+0x10>)
 80011da:	2201      	movs	r2, #1
 80011dc:	8819      	ldrh	r1, [r3, #0]
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <NRF24_csn.part.0+0x14>)
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	f7ff b93b 	b.w	800045c <HAL_GPIO_WritePin>
 80011e6:	bf00      	nop
 80011e8:	2000008e 	.word	0x2000008e
 80011ec:	20000090 	.word	0x20000090

080011f0 <NRF24_ce.part.1>:
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <NRF24_ce.part.1+0x10>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	8819      	ldrh	r1, [r3, #0]
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <NRF24_ce.part.1+0x14>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	f7ff b92f 	b.w	800045c <HAL_GPIO_WritePin>
 80011fe:	bf00      	nop
 8001200:	2000008c 	.word	0x2000008c
 8001204:	20000090 	.word	0x20000090

08001208 <NRF24_csn>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001208:	4602      	mov	r2, r0
 800120a:	b108      	cbz	r0, 8001210 <NRF24_csn+0x8>
 800120c:	f7ff bfe4 	b.w	80011d8 <NRF24_csn.part.0>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <NRF24_csn+0x14>)
 8001212:	8819      	ldrh	r1, [r3, #0]
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <NRF24_csn+0x18>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f7ff b920 	b.w	800045c <HAL_GPIO_WritePin>
 800121c:	2000008e 	.word	0x2000008e
 8001220:	20000090 	.word	0x20000090

08001224 <NRF24_ce>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001224:	4602      	mov	r2, r0
 8001226:	b108      	cbz	r0, 800122c <NRF24_ce+0x8>
 8001228:	f7ff bfe2 	b.w	80011f0 <NRF24_ce.part.1>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <NRF24_ce+0x14>)
 800122e:	8819      	ldrh	r1, [r3, #0]
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <NRF24_ce+0x18>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f7ff b912 	b.w	800045c <HAL_GPIO_WritePin>
 8001238:	2000008c 	.word	0x2000008c
 800123c:	20000090 	.word	0x20000090

08001240 <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001240:	b513      	push	{r0, r1, r4, lr}
 8001242:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ffdf 	bl	8001208 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800124a:	f004 041f 	and.w	r4, r4, #31
 800124e:	a902      	add	r1, sp, #8
 8001250:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001254:	4c09      	ldr	r4, [pc, #36]	; (800127c <NRF24_read_register+0x3c>)
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	2201      	movs	r2, #1
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fc26 	bl	8000aac <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	f10d 0105 	add.w	r1, sp, #5
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fdc5 	bl	8000df8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800126e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001272:	f7ff ffb1 	bl	80011d8 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 8001276:	4620      	mov	r0, r4
 8001278:	b002      	add	sp, #8
 800127a:	bd10      	pop	{r4, pc}
 800127c:	20000094 	.word	0x20000094

08001280 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001280:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001282:	4604      	mov	r4, r0
 8001284:	460d      	mov	r5, r1
 8001286:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ffbd 	bl	8001208 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800128e:	f004 041f 	and.w	r4, r4, #31
 8001292:	a902      	add	r1, sp, #8
 8001294:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001298:	4c07      	ldr	r4, [pc, #28]	; (80012b8 <NRF24_read_registerN+0x38>)
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	2201      	movs	r2, #1
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff fc04 	bl	8000aac <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	4632      	mov	r2, r6
 80012a8:	4629      	mov	r1, r5
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fda4 	bl	8000df8 <HAL_SPI_Receive>
 80012b0:	f7ff ff92 	bl	80011d8 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 80012b4:	b002      	add	sp, #8
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	20000094 	.word	0x20000094

080012bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80012bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ffa0 	bl	8001208 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80012c8:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	2202      	movs	r2, #2
 80012d0:	a901      	add	r1, sp, #4
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <NRF24_write_register+0x2c>)
	spiBuf[0] = reg|0x20;
 80012d4:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80012d8:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80012dc:	f7ff fbe6 	bl	8000aac <HAL_SPI_Transmit>
 80012e0:	f7ff ff7a 	bl	80011d8 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 80012e4:	b003      	add	sp, #12
 80012e6:	bd30      	pop	{r4, r5, pc}
 80012e8:	20000094 	.word	0x20000094

080012ec <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80012ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	460d      	mov	r5, r1
 80012f2:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff87 	bl	8001208 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80012fa:	f044 0420 	orr.w	r4, r4, #32
 80012fe:	a902      	add	r1, sp, #8
 8001300:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001304:	4c07      	ldr	r4, [pc, #28]	; (8001324 <NRF24_write_registerN+0x38>)
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	2201      	movs	r2, #1
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff fbce 	bl	8000aac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	4632      	mov	r2, r6
 8001314:	4629      	mov	r1, r5
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fbc8 	bl	8000aac <HAL_SPI_Transmit>
 800131c:	f7ff ff5c 	bl	80011d8 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8001320:	b002      	add	sp, #8
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	20000094 	.word	0x20000094

08001328 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001328:	b573      	push	{r0, r1, r4, r5, r6, lr}
  payload_size = MIN(size,max_payload_size);
}
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <NRF24_read_payload+0x3c>)
{
 800132c:	4606      	mov	r6, r0
 800132e:	781c      	ldrb	r4, [r3, #0]
	NRF24_csn(0);
 8001330:	2000      	movs	r0, #0
 8001332:	428c      	cmp	r4, r1
 8001334:	bf28      	it	cs
 8001336:	460c      	movcs	r4, r1
 8001338:	f7ff ff66 	bl	8001208 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800133c:	2361      	movs	r3, #97	; 0x61
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800133e:	4d0a      	ldr	r5, [pc, #40]	; (8001368 <NRF24_read_payload+0x40>)
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001340:	a902      	add	r1, sp, #8
 8001342:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001346:	2201      	movs	r2, #1
 8001348:	2364      	movs	r3, #100	; 0x64
 800134a:	4628      	mov	r0, r5
 800134c:	f7ff fbae 	bl	8000aac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	4622      	mov	r2, r4
 8001354:	4631      	mov	r1, r6
 8001356:	4628      	mov	r0, r5
 8001358:	f7ff fd4e 	bl	8000df8 <HAL_SPI_Receive>
 800135c:	f7ff ff3c 	bl	80011d8 <NRF24_csn.part.0>
}
 8001360:	b002      	add	sp, #8
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	2000012c 	.word	0x2000012c
 8001368:	20000094 	.word	0x20000094

0800136c <NRF24_flush_tx>:
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800136c:	21ff      	movs	r1, #255	; 0xff
 800136e:	20e1      	movs	r0, #225	; 0xe1
 8001370:	f7ff bfa4 	b.w	80012bc <NRF24_write_register>

08001374 <NRF24_flush_rx>:
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001374:	21ff      	movs	r1, #255	; 0xff
 8001376:	20e2      	movs	r0, #226	; 0xe2
 8001378:	f7ff bfa0 	b.w	80012bc <NRF24_write_register>

0800137c <NRF24_get_status>:
	statReg = NRF24_read_register(REG_STATUS);
 800137c:	2007      	movs	r0, #7
 800137e:	f7ff bf5f 	b.w	8001240 <NRF24_read_register>
	...

08001384 <NRF24_startListening>:
{
 8001384:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff5a 	bl	8001240 <NRF24_read_register>
 800138c:	f040 0103 	orr.w	r1, r0, #3
 8001390:	b2c9      	uxtb	r1, r1
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff92 	bl	80012bc <NRF24_write_register>
	if(pipe0_reading_address)
 8001398:	4909      	ldr	r1, [pc, #36]	; (80013c0 <NRF24_startListening+0x3c>)
 800139a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800139e:	4313      	orrs	r3, r2
 80013a0:	d003      	beq.n	80013aa <NRF24_startListening+0x26>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80013a2:	2205      	movs	r2, #5
 80013a4:	200a      	movs	r0, #10
 80013a6:	f7ff ffa1 	bl	80012ec <NRF24_write_registerN>
	NRF24_flush_tx();
 80013aa:	f7ff ffdf 	bl	800136c <NRF24_flush_tx>
	NRF24_flush_rx();
 80013ae:	f7ff ffe1 	bl	8001374 <NRF24_flush_rx>
 80013b2:	f7ff ff1d 	bl	80011f0 <NRF24_ce.part.1>
}
 80013b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
         HAL_Delay(uSec);
 80013ba:	2096      	movs	r0, #150	; 0x96
 80013bc:	f7fe bf02 	b.w	80001c4 <HAL_Delay>
 80013c0:	20000130 	.word	0x20000130

080013c4 <NRF24_openReadingPipe>:
{
 80013c4:	b513      	push	{r0, r1, r4, lr}
	if (number == 0)
 80013c6:	4604      	mov	r4, r0
{
 80013c8:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 80013cc:	b9d8      	cbnz	r0, 8001406 <NRF24_openReadingPipe+0x42>
    pipe0_reading_address = address;
 80013ce:	4911      	ldr	r1, [pc, #68]	; (8001414 <NRF24_openReadingPipe+0x50>)
 80013d0:	e9c1 2300 	strd	r2, r3, [r1]
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80013d4:	2205      	movs	r2, #5
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <NRF24_openReadingPipe+0x54>)
 80013d8:	4669      	mov	r1, sp
 80013da:	5d18      	ldrb	r0, [r3, r4]
 80013dc:	f7ff ff86 	bl	80012ec <NRF24_write_registerN>
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <NRF24_openReadingPipe+0x58>)
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <NRF24_openReadingPipe+0x5c>)
 80013e6:	5d18      	ldrb	r0, [r3, r4]
 80013e8:	f7ff ff68 	bl	80012bc <NRF24_write_register>
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff ff27 	bl	8001240 <NRF24_read_register>
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f404 	lsl.w	r4, r1, r4
 80013f8:	4304      	orrs	r4, r0
 80013fa:	b2e1      	uxtb	r1, r4
 80013fc:	2002      	movs	r0, #2
 80013fe:	f7ff ff5d 	bl	80012bc <NRF24_write_register>
}
 8001402:	b002      	add	sp, #8
 8001404:	bd10      	pop	{r4, pc}
	if(number <= 6)
 8001406:	2806      	cmp	r0, #6
 8001408:	d8fb      	bhi.n	8001402 <NRF24_openReadingPipe+0x3e>
		if(number < 2)
 800140a:	2801      	cmp	r0, #1
 800140c:	d0e2      	beq.n	80013d4 <NRF24_openReadingPipe+0x10>
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800140e:	2201      	movs	r2, #1
 8001410:	e7e1      	b.n	80013d6 <NRF24_openReadingPipe+0x12>
 8001412:	bf00      	nop
 8001414:	20000130 	.word	0x20000130
 8001418:	08002c98 	.word	0x08002c98
 800141c:	2000012c 	.word	0x2000012c
 8001420:	08002c9f 	.word	0x08002c9f

08001424 <NRF24_setChannel>:
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001424:	287f      	cmp	r0, #127	; 0x7f
 8001426:	4601      	mov	r1, r0
 8001428:	bf28      	it	cs
 800142a:	217f      	movcs	r1, #127	; 0x7f
 800142c:	2005      	movs	r0, #5
 800142e:	f7ff bf45 	b.w	80012bc <NRF24_write_register>
	...

08001434 <NRF24_setPayloadSize>:
  payload_size = MIN(size,max_payload_size);
 8001434:	2820      	cmp	r0, #32
 8001436:	bf28      	it	cs
 8001438:	2020      	movcs	r0, #32
 800143a:	4b01      	ldr	r3, [pc, #4]	; (8001440 <NRF24_setPayloadSize+0xc>)
 800143c:	7018      	strb	r0, [r3, #0]
 800143e:	4770      	bx	lr
 8001440:	2000012c 	.word	0x2000012c

08001444 <NRF24_getDynamicPayloadSize>:
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001444:	2060      	movs	r0, #96	; 0x60
 8001446:	f7ff befb 	b.w	8001240 <NRF24_read_register>

0800144a <NRF24_read>:
{
 800144a:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800144c:	f7ff ff6c 	bl	8001328 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001450:	2017      	movs	r0, #23
 8001452:	f7ff fef5 	bl	8001240 <NRF24_read_register>
 8001456:	4604      	mov	r4, r0
	NRF24_flush_rx();
 8001458:	f7ff ff8c 	bl	8001374 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800145c:	f7ff fff2 	bl	8001444 <NRF24_getDynamicPayloadSize>
}
 8001460:	f004 0001 	and.w	r0, r4, #1
 8001464:	bd10      	pop	{r4, pc}

08001466 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001466:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001468:	201d      	movs	r0, #29
 800146a:	f7ff fee9 	bl	8001240 <NRF24_read_register>
 800146e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8001472:	201d      	movs	r0, #29
 8001474:	f7ff ff22 	bl	80012bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
	dynamic_payloads_enabled = false;
}
 8001478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,0);
 800147c:	2100      	movs	r1, #0
 800147e:	201c      	movs	r0, #28
 8001480:	f7ff bf1c 	b.w	80012bc <NRF24_write_register>

08001484 <NRF24_setAutoAck>:
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
	if ( enable )
 8001484:	4601      	mov	r1, r0
 8001486:	b100      	cbz	r0, 800148a <NRF24_setAutoAck+0x6>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001488:	213f      	movs	r1, #63	; 0x3f
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff bf16 	b.w	80012bc <NRF24_write_register>

08001490 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001490:	b510      	push	{r4, lr}
 8001492:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001494:	2006      	movs	r0, #6
 8001496:	f7ff fed3 	bl	8001240 <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800149a:	2c03      	cmp	r4, #3
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800149c:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
  if ( level == RF24_PA_0dB)
 80014a0:	d102      	bne.n	80014a8 <NRF24_setPALevel+0x18>
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80014a2:	f041 0106 	orr.w	r1, r1, #6
 80014a6:	e003      	b.n	80014b0 <NRF24_setPALevel+0x20>
  else if ( level == RF24_PA_m6dB )
 80014a8:	2c02      	cmp	r4, #2
 80014aa:	d106      	bne.n	80014ba <NRF24_setPALevel+0x2a>
    setup |= _BV(RF_PWR_HIGH) ;
 80014ac:	f041 0104 	orr.w	r1, r1, #4
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80014b0:	2006      	movs	r0, #6
}
 80014b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80014b6:	f7ff bf01 	b.w	80012bc <NRF24_write_register>
  else if ( level == RF24_PA_m12dB )
 80014ba:	2c01      	cmp	r4, #1
 80014bc:	d102      	bne.n	80014c4 <NRF24_setPALevel+0x34>
    setup |= _BV(RF_PWR_LOW);
 80014be:	f041 0102 	orr.w	r1, r1, #2
 80014c2:	e7f5      	b.n	80014b0 <NRF24_setPALevel+0x20>
  else if ( level == RF24_PA_ERROR )
 80014c4:	2c04      	cmp	r4, #4
 80014c6:	d1f3      	bne.n	80014b0 <NRF24_setPALevel+0x20>
 80014c8:	e7eb      	b.n	80014a2 <NRF24_setPALevel+0x12>

080014ca <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80014ca:	b538      	push	{r3, r4, r5, lr}
 80014cc:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80014ce:	2006      	movs	r0, #6
 80014d0:	f7ff feb6 	bl	8001240 <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  if( speed == RF24_250KBPS )
 80014d4:	2d02      	cmp	r5, #2
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80014d6:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 80014da:	d10c      	bne.n	80014f6 <NRF24_setDataRate+0x2c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
 80014dc:	f044 0420 	orr.w	r4, r4, #32
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80014e0:	4621      	mov	r1, r4
 80014e2:	2006      	movs	r0, #6
 80014e4:	f7ff feea 	bl	80012bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80014e8:	2006      	movs	r0, #6
 80014ea:	f7ff fea9 	bl	8001240 <NRF24_read_register>
  {
    wide_band = false;
  }

  return result;
}
 80014ee:	1a23      	subs	r3, r4, r0
 80014f0:	4258      	negs	r0, r3
 80014f2:	4158      	adcs	r0, r3
 80014f4:	bd38      	pop	{r3, r4, r5, pc}
    if ( speed == RF24_2MBPS )
 80014f6:	2d01      	cmp	r5, #1
      setup |= _BV(RF_DR_HIGH);
 80014f8:	bf08      	it	eq
 80014fa:	f044 0408 	orreq.w	r4, r4, #8
 80014fe:	e7ef      	b.n	80014e0 <NRF24_setDataRate+0x16>

08001500 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001500:	b510      	push	{r4, lr}
 8001502:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fe9b 	bl	8001240 <NRF24_read_register>
 800150a:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800150e:	b12c      	cbz	r4, 800151c <NRF24_setCRCLength+0x1c>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001510:	2c01      	cmp	r4, #1
  {
    config |= _BV(BIT_EN_CRC);
 8001512:	bf0c      	ite	eq
 8001514:	f041 0108 	orreq.w	r1, r1, #8
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8001518:	f041 010c 	orrne.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 800151c:	2000      	movs	r0, #0
}
 800151e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_CONFIG, config );
 8001522:	f7ff becb 	b.w	80012bc <NRF24_write_register>

08001526 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001526:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fe89 	bl	8001240 <NRF24_read_register>
}
 800152e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001532:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff bec0 	b.w	80012bc <NRF24_write_register>

0800153c <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4605      	mov	r5, r0
	uint8_t status = NRF24_get_status();
 8001540:	f7ff ff1c 	bl	800137c <NRF24_get_status>
 8001544:	f000 0340 	and.w	r3, r0, #64	; 0x40

  bool result = ( status & _BV(BIT_RX_DR) );
 8001548:	2b00      	cmp	r3, #0
	uint8_t status = NRF24_get_status();
 800154a:	4604      	mov	r4, r0
  bool result = ( status & _BV(BIT_RX_DR) );
 800154c:	bf14      	ite	ne
 800154e:	2601      	movne	r6, #1
 8001550:	2600      	moveq	r6, #0

  if (result)
 8001552:	d00d      	beq.n	8001570 <NRF24_availablePipe+0x34>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001554:	b115      	cbz	r5, 800155c <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001556:	f3c0 0342 	ubfx	r3, r0, #1, #3
 800155a:	702b      	strb	r3, [r5, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	2007      	movs	r0, #7
 8001560:	f7ff feac 	bl	80012bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001564:	06a3      	lsls	r3, r4, #26
 8001566:	d503      	bpl.n	8001570 <NRF24_availablePipe+0x34>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001568:	2120      	movs	r1, #32
 800156a:	2007      	movs	r0, #7
 800156c:	f7ff fea6 	bl	80012bc <NRF24_write_register>
    }
  }
  return result;
}
 8001570:	4630      	mov	r0, r6
 8001572:	bd70      	pop	{r4, r5, r6, pc}

08001574 <NRF24_available>:
	return NRF24_availablePipe(NULL);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff bfe1 	b.w	800153c <NRF24_availablePipe>

0800157a <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 800157a:	b570      	push	{r4, r5, r6, lr}
 800157c:	4616      	mov	r6, r2
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
  uint8_t data_len = MIN(len,max_payload_size);
	
  NRF24_csn(0);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fe40 	bl	8001208 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001588:	2e20      	cmp	r6, #32
 800158a:	f004 0007 	and.w	r0, r4, #7
 800158e:	4632      	mov	r2, r6
 8001590:	4629      	mov	r1, r5
 8001592:	bf28      	it	cs
 8001594:	2220      	movcs	r2, #32
 8001596:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 800159a:	f7ff fea7 	bl	80012ec <NRF24_write_registerN>
  NRF24_csn(1);
}
 800159e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80015a2:	f7ff be19 	b.w	80011d8 <NRF24_csn.part.0>

080015a6 <NRF24_resetStatus>:
}

//46. Reset Status
void NRF24_resetStatus(void)
{
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80015a6:	2170      	movs	r1, #112	; 0x70
 80015a8:	2007      	movs	r0, #7
 80015aa:	f7ff be87 	b.w	80012bc <NRF24_write_register>
	...

080015b0 <NRF24_ACTIVATE_cmd>:
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80015b0:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fe28 	bl	8001208 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80015b8:	2350      	movs	r3, #80	; 0x50
 80015ba:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80015be:	2373      	movs	r3, #115	; 0x73
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80015c0:	2202      	movs	r2, #2
	cmdRxBuf[1] = 0x73;
 80015c2:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80015c6:	a901      	add	r1, sp, #4
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <NRF24_ACTIVATE_cmd+0x2c>)
 80015cc:	f7ff fa6e 	bl	8000aac <HAL_SPI_Transmit>
 80015d0:	f7ff fe02 	bl	80011d8 <NRF24_csn.part.0>
	NRF24_csn(1);
}
 80015d4:	b003      	add	sp, #12
 80015d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015da:	bf00      	nop
 80015dc:	20000094 	.word	0x20000094

080015e0 <NRF24_enableAckPayload>:
{
 80015e0:	b508      	push	{r3, lr}
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80015e2:	201d      	movs	r0, #29
 80015e4:	f7ff fe2c 	bl	8001240 <NRF24_read_register>
 80015e8:	f040 0106 	orr.w	r1, r0, #6
 80015ec:	b2c9      	uxtb	r1, r1
 80015ee:	201d      	movs	r0, #29
 80015f0:	f7ff fe64 	bl	80012bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80015f4:	201d      	movs	r0, #29
 80015f6:	f7ff fe23 	bl	8001240 <NRF24_read_register>
 80015fa:	b950      	cbnz	r0, 8001612 <NRF24_enableAckPayload+0x32>
		NRF24_ACTIVATE_cmd();
 80015fc:	f7ff ffd8 	bl	80015b0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001600:	201d      	movs	r0, #29
 8001602:	f7ff fe1d 	bl	8001240 <NRF24_read_register>
 8001606:	f040 0106 	orr.w	r1, r0, #6
 800160a:	b2c9      	uxtb	r1, r1
 800160c:	201d      	movs	r0, #29
 800160e:	f7ff fe55 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001612:	201c      	movs	r0, #28
 8001614:	f7ff fe14 	bl	8001240 <NRF24_read_register>
}
 8001618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800161c:	f040 0103 	orr.w	r1, r0, #3
 8001620:	b2c9      	uxtb	r1, r1
 8001622:	201c      	movs	r0, #28
 8001624:	f7ff be4a 	b.w	80012bc <NRF24_write_register>

08001628 <NRF24_enableDynamicPayloads>:
{
 8001628:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800162a:	201d      	movs	r0, #29
 800162c:	f7ff fe08 	bl	8001240 <NRF24_read_register>
 8001630:	f040 0104 	orr.w	r1, r0, #4
 8001634:	b2c9      	uxtb	r1, r1
 8001636:	201d      	movs	r0, #29
 8001638:	f7ff fe40 	bl	80012bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800163c:	201d      	movs	r0, #29
 800163e:	f7ff fdff 	bl	8001240 <NRF24_read_register>
 8001642:	b950      	cbnz	r0, 800165a <NRF24_enableDynamicPayloads+0x32>
		NRF24_ACTIVATE_cmd();
 8001644:	f7ff ffb4 	bl	80015b0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001648:	201d      	movs	r0, #29
 800164a:	f7ff fdf9 	bl	8001240 <NRF24_read_register>
 800164e:	f040 0104 	orr.w	r1, r0, #4
 8001652:	b2c9      	uxtb	r1, r1
 8001654:	201d      	movs	r0, #29
 8001656:	f7ff fe31 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800165a:	201c      	movs	r0, #28
 800165c:	f7ff fdf0 	bl	8001240 <NRF24_read_register>
}
 8001660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001664:	f040 013f 	orr.w	r1, r0, #63	; 0x3f
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	201c      	movs	r0, #28
 800166c:	f7ff be26 	b.w	80012bc <NRF24_write_register>

08001670 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001670:	b510      	push	{r4, lr}
 8001672:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001674:	49bc      	ldr	r1, [pc, #752]	; (8001968 <printRadioSettings+0x2f8>)
 8001676:	a807      	add	r0, sp, #28
 8001678:	f000 fe86 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800167c:	a807      	add	r0, sp, #28
 800167e:	f7fe fd65 	bl	800014c <strlen>
 8001682:	230a      	movs	r3, #10
 8001684:	b282      	uxth	r2, r0
 8001686:	a907      	add	r1, sp, #28
 8001688:	48b8      	ldr	r0, [pc, #736]	; (800196c <printRadioSettings+0x2fc>)
 800168a:	f7ff fd49 	bl	8001120 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fdd6 	bl	8001240 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001694:	0704      	lsls	r4, r0, #28
 8001696:	f140 8230 	bpl.w	8001afa <printRadioSettings+0x48a>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800169a:	0740      	lsls	r0, r0, #29
 800169c:	bf4c      	ite	mi
 800169e:	49b4      	ldrmi	r1, [pc, #720]	; (8001970 <printRadioSettings+0x300>)
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80016a0:	49b4      	ldrpl	r1, [pc, #720]	; (8001974 <printRadioSettings+0x304>)
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80016a2:	a807      	add	r0, sp, #28
 80016a4:	f000 fe70 	bl	8002388 <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a8:	a807      	add	r0, sp, #28
 80016aa:	f7fe fd4f 	bl	800014c <strlen>
 80016ae:	230a      	movs	r3, #10
 80016b0:	b282      	uxth	r2, r0
 80016b2:	a907      	add	r1, sp, #28
 80016b4:	48ad      	ldr	r0, [pc, #692]	; (800196c <printRadioSettings+0x2fc>)
 80016b6:	f7ff fd33 	bl	8001120 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fdc0 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016c0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80016c4:	9303      	str	r3, [sp, #12]
 80016c6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80016d6:	f000 0201 	and.w	r2, r0, #1
 80016da:	49a7      	ldr	r1, [pc, #668]	; (8001978 <printRadioSettings+0x308>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80016e2:	a807      	add	r0, sp, #28
 80016e4:	f000 fe2c 	bl	8002340 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	a807      	add	r0, sp, #28
 80016ea:	f7fe fd2f 	bl	800014c <strlen>
 80016ee:	230a      	movs	r3, #10
 80016f0:	b282      	uxth	r2, r0
 80016f2:	a907      	add	r1, sp, #28
 80016f4:	489d      	ldr	r0, [pc, #628]	; (800196c <printRadioSettings+0x2fc>)
 80016f6:	f7ff fd13 	bl	8001120 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7ff fda0 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001700:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001704:	9303      	str	r3, [sp, #12]
 8001706:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001716:	f000 0201 	and.w	r2, r0, #1
 800171a:	4998      	ldr	r1, [pc, #608]	; (800197c <printRadioSettings+0x30c>)
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001722:	a807      	add	r0, sp, #28
 8001724:	f000 fe0c 	bl	8002340 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001728:	a807      	add	r0, sp, #28
 800172a:	f7fe fd0f 	bl	800014c <strlen>
 800172e:	230a      	movs	r3, #10
 8001730:	b282      	uxth	r2, r0
 8001732:	a907      	add	r1, sp, #28
 8001734:	488d      	ldr	r0, [pc, #564]	; (800196c <printRadioSettings+0x2fc>)
 8001736:	f7ff fcf3 	bl	8001120 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800173a:	2003      	movs	r0, #3
 800173c:	f7ff fd80 	bl	8001240 <NRF24_read_register>
 8001740:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001744:	3202      	adds	r2, #2
 8001746:	498e      	ldr	r1, [pc, #568]	; (8001980 <printRadioSettings+0x310>)
 8001748:	a807      	add	r0, sp, #28
 800174a:	f000 fdf9 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800174e:	a807      	add	r0, sp, #28
 8001750:	f7fe fcfc 	bl	800014c <strlen>
 8001754:	230a      	movs	r3, #10
 8001756:	b282      	uxth	r2, r0
 8001758:	a907      	add	r1, sp, #28
 800175a:	4884      	ldr	r0, [pc, #528]	; (800196c <printRadioSettings+0x2fc>)
 800175c:	f7ff fce0 	bl	8001120 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001760:	2005      	movs	r0, #5
 8001762:	f7ff fd6d 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001766:	4987      	ldr	r1, [pc, #540]	; (8001984 <printRadioSettings+0x314>)
 8001768:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800176c:	a807      	add	r0, sp, #28
 800176e:	f000 fde7 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001772:	a807      	add	r0, sp, #28
 8001774:	f7fe fcea 	bl	800014c <strlen>
 8001778:	a907      	add	r1, sp, #28
 800177a:	b282      	uxth	r2, r0
 800177c:	230a      	movs	r3, #10
 800177e:	487b      	ldr	r0, [pc, #492]	; (800196c <printRadioSettings+0x2fc>)
 8001780:	f7ff fcce 	bl	8001120 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001784:	2006      	movs	r0, #6
 8001786:	f7ff fd5b 	bl	8001240 <NRF24_read_register>
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800178a:	0701      	lsls	r1, r0, #28
 800178c:	bf4c      	ite	mi
 800178e:	497e      	ldrmi	r1, [pc, #504]	; (8001988 <printRadioSettings+0x318>)
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001790:	497e      	ldrpl	r1, [pc, #504]	; (800198c <printRadioSettings+0x31c>)
	reg8Val = NRF24_read_register(0x06);
 8001792:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001794:	a807      	add	r0, sp, #28
 8001796:	f000 fdf7 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800179a:	a807      	add	r0, sp, #28
 800179c:	f7fe fcd6 	bl	800014c <strlen>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80017a0:	f3c4 0441 	ubfx	r4, r4, #1, #2
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017a4:	b282      	uxth	r2, r0
 80017a6:	230a      	movs	r3, #10
 80017a8:	a907      	add	r1, sp, #28
 80017aa:	4870      	ldr	r0, [pc, #448]	; (800196c <printRadioSettings+0x2fc>)
 80017ac:	f7ff fcb8 	bl	8001120 <HAL_UART_Transmit>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	f040 81a4 	bne.w	8001afe <printRadioSettings+0x48e>
 80017b6:	4976      	ldr	r1, [pc, #472]	; (8001990 <printRadioSettings+0x320>)
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80017b8:	a807      	add	r0, sp, #28
 80017ba:	f000 fde5 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017be:	a807      	add	r0, sp, #28
 80017c0:	f7fe fcc4 	bl	800014c <strlen>
 80017c4:	230a      	movs	r3, #10
 80017c6:	b282      	uxth	r2, r0
 80017c8:	a907      	add	r1, sp, #28
 80017ca:	4868      	ldr	r0, [pc, #416]	; (800196c <printRadioSettings+0x2fc>)
 80017cc:	f7ff fca8 	bl	8001120 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80017d0:	a905      	add	r1, sp, #20
 80017d2:	2205      	movs	r2, #5
 80017d4:	200a      	movs	r0, #10
 80017d6:	f7ff fd53 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80017da:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80017de:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017e2:	9102      	str	r1, [sp, #8]
 80017e4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80017e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80017ec:	9101      	str	r1, [sp, #4]
 80017ee:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80017f2:	a807      	add	r0, sp, #28
 80017f4:	9100      	str	r1, [sp, #0]
 80017f6:	4967      	ldr	r1, [pc, #412]	; (8001994 <printRadioSettings+0x324>)
 80017f8:	f000 fda2 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017fc:	a807      	add	r0, sp, #28
 80017fe:	f7fe fca5 	bl	800014c <strlen>
 8001802:	230a      	movs	r3, #10
 8001804:	b282      	uxth	r2, r0
 8001806:	a907      	add	r1, sp, #28
 8001808:	4858      	ldr	r0, [pc, #352]	; (800196c <printRadioSettings+0x2fc>)
 800180a:	f7ff fc89 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800180e:	a905      	add	r1, sp, #20
 8001810:	2205      	movs	r2, #5
 8001812:	200b      	movs	r0, #11
 8001814:	f7ff fd34 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001818:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800181c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001820:	9102      	str	r1, [sp, #8]
 8001822:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8001826:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800182a:	9101      	str	r1, [sp, #4]
 800182c:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001830:	a807      	add	r0, sp, #28
 8001832:	9100      	str	r1, [sp, #0]
 8001834:	4958      	ldr	r1, [pc, #352]	; (8001998 <printRadioSettings+0x328>)
 8001836:	f000 fd83 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183a:	a807      	add	r0, sp, #28
 800183c:	f7fe fc86 	bl	800014c <strlen>
 8001840:	230a      	movs	r3, #10
 8001842:	b282      	uxth	r2, r0
 8001844:	a907      	add	r1, sp, #28
 8001846:	4849      	ldr	r0, [pc, #292]	; (800196c <printRadioSettings+0x2fc>)
 8001848:	f7ff fc6a 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800184c:	a905      	add	r1, sp, #20
 800184e:	2201      	movs	r2, #1
 8001850:	200c      	movs	r0, #12
 8001852:	f7ff fd15 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001856:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800185a:	4950      	ldr	r1, [pc, #320]	; (800199c <printRadioSettings+0x32c>)
 800185c:	a807      	add	r0, sp, #28
 800185e:	f000 fd6f 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001862:	a807      	add	r0, sp, #28
 8001864:	f7fe fc72 	bl	800014c <strlen>
 8001868:	230a      	movs	r3, #10
 800186a:	b282      	uxth	r2, r0
 800186c:	a907      	add	r1, sp, #28
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <printRadioSettings+0x2fc>)
 8001870:	f7ff fc56 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001874:	a905      	add	r1, sp, #20
 8001876:	2201      	movs	r2, #1
 8001878:	200d      	movs	r0, #13
 800187a:	f7ff fd01 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800187e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001882:	4947      	ldr	r1, [pc, #284]	; (80019a0 <printRadioSettings+0x330>)
 8001884:	a807      	add	r0, sp, #28
 8001886:	f000 fd5b 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800188a:	a807      	add	r0, sp, #28
 800188c:	f7fe fc5e 	bl	800014c <strlen>
 8001890:	230a      	movs	r3, #10
 8001892:	b282      	uxth	r2, r0
 8001894:	a907      	add	r1, sp, #28
 8001896:	4835      	ldr	r0, [pc, #212]	; (800196c <printRadioSettings+0x2fc>)
 8001898:	f7ff fc42 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800189c:	a905      	add	r1, sp, #20
 800189e:	2201      	movs	r2, #1
 80018a0:	200e      	movs	r0, #14
 80018a2:	f7ff fced 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018a6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018aa:	493e      	ldr	r1, [pc, #248]	; (80019a4 <printRadioSettings+0x334>)
 80018ac:	a807      	add	r0, sp, #28
 80018ae:	f000 fd47 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018b2:	a807      	add	r0, sp, #28
 80018b4:	f7fe fc4a 	bl	800014c <strlen>
 80018b8:	230a      	movs	r3, #10
 80018ba:	b282      	uxth	r2, r0
 80018bc:	a907      	add	r1, sp, #28
 80018be:	482b      	ldr	r0, [pc, #172]	; (800196c <printRadioSettings+0x2fc>)
 80018c0:	f7ff fc2e 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80018c4:	a905      	add	r1, sp, #20
 80018c6:	2201      	movs	r2, #1
 80018c8:	200f      	movs	r0, #15
 80018ca:	f7ff fcd9 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018ce:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018d2:	4935      	ldr	r1, [pc, #212]	; (80019a8 <printRadioSettings+0x338>)
 80018d4:	a807      	add	r0, sp, #28
 80018d6:	f000 fd33 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018da:	a807      	add	r0, sp, #28
 80018dc:	f7fe fc36 	bl	800014c <strlen>
 80018e0:	230a      	movs	r3, #10
 80018e2:	b282      	uxth	r2, r0
 80018e4:	a907      	add	r1, sp, #28
 80018e6:	4821      	ldr	r0, [pc, #132]	; (800196c <printRadioSettings+0x2fc>)
 80018e8:	f7ff fc1a 	bl	8001120 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80018ec:	a905      	add	r1, sp, #20
 80018ee:	2205      	movs	r2, #5
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff fcc5 	bl	8001280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018f6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80018fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80018fe:	9102      	str	r1, [sp, #8]
 8001900:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8001904:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001908:	9101      	str	r1, [sp, #4]
 800190a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800190e:	a807      	add	r0, sp, #28
 8001910:	9100      	str	r1, [sp, #0]
 8001912:	4926      	ldr	r1, [pc, #152]	; (80019ac <printRadioSettings+0x33c>)
 8001914:	f000 fd14 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001918:	a807      	add	r0, sp, #28
 800191a:	f7fe fc17 	bl	800014c <strlen>
 800191e:	230a      	movs	r3, #10
 8001920:	b282      	uxth	r2, r0
 8001922:	a907      	add	r1, sp, #28
 8001924:	4811      	ldr	r0, [pc, #68]	; (800196c <printRadioSettings+0x2fc>)
 8001926:	f7ff fbfb 	bl	8001120 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800192a:	2011      	movs	r0, #17
 800192c:	f7ff fc88 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001930:	491f      	ldr	r1, [pc, #124]	; (80019b0 <printRadioSettings+0x340>)
 8001932:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001936:	a807      	add	r0, sp, #28
 8001938:	f000 fd02 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193c:	a807      	add	r0, sp, #28
 800193e:	f7fe fc05 	bl	800014c <strlen>
 8001942:	230a      	movs	r3, #10
 8001944:	b282      	uxth	r2, r0
 8001946:	a907      	add	r1, sp, #28
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <printRadioSettings+0x2fc>)
 800194a:	f7ff fbe9 	bl	8001120 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800194e:	2012      	movs	r0, #18
 8001950:	f7ff fc76 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001954:	4917      	ldr	r1, [pc, #92]	; (80019b4 <printRadioSettings+0x344>)
 8001956:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800195a:	a807      	add	r0, sp, #28
 800195c:	f000 fcf0 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001960:	a807      	add	r0, sp, #28
 8001962:	f7fe fbf3 	bl	800014c <strlen>
 8001966:	e027      	b.n	80019b8 <printRadioSettings+0x348>
 8001968:	08002ca5 	.word	0x08002ca5
 800196c:	200000ec 	.word	0x200000ec
 8001970:	08002cd8 	.word	0x08002cd8
 8001974:	08002cf4 	.word	0x08002cf4
 8001978:	08002d23 	.word	0x08002d23
 800197c:	08002d67 	.word	0x08002d67
 8001980:	08002db0 	.word	0x08002db0
 8001984:	08002dc9 	.word	0x08002dc9
 8001988:	08002ddc 	.word	0x08002ddc
 800198c:	08002df3 	.word	0x08002df3
 8001990:	08002e0a 	.word	0x08002e0a
 8001994:	08002e57 	.word	0x08002e57
 8001998:	08002e87 	.word	0x08002e87
 800199c:	08002eb7 	.word	0x08002eb7
 80019a0:	08002edf 	.word	0x08002edf
 80019a4:	08002f07 	.word	0x08002f07
 80019a8:	08002f2f 	.word	0x08002f2f
 80019ac:	08002f57 	.word	0x08002f57
 80019b0:	08002f81 	.word	0x08002f81
 80019b4:	08002f9a 	.word	0x08002f9a
 80019b8:	230a      	movs	r3, #10
 80019ba:	b282      	uxth	r2, r0
 80019bc:	a907      	add	r1, sp, #28
 80019be:	4854      	ldr	r0, [pc, #336]	; (8001b10 <printRadioSettings+0x4a0>)
 80019c0:	f7ff fbae 	bl	8001120 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80019c4:	2013      	movs	r0, #19
 80019c6:	f7ff fc3b 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019ca:	4952      	ldr	r1, [pc, #328]	; (8001b14 <printRadioSettings+0x4a4>)
 80019cc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019d0:	a807      	add	r0, sp, #28
 80019d2:	f000 fcb5 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019d6:	a807      	add	r0, sp, #28
 80019d8:	f7fe fbb8 	bl	800014c <strlen>
 80019dc:	230a      	movs	r3, #10
 80019de:	b282      	uxth	r2, r0
 80019e0:	a907      	add	r1, sp, #28
 80019e2:	484b      	ldr	r0, [pc, #300]	; (8001b10 <printRadioSettings+0x4a0>)
 80019e4:	f7ff fb9c 	bl	8001120 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80019e8:	2014      	movs	r0, #20
 80019ea:	f7ff fc29 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019ee:	494a      	ldr	r1, [pc, #296]	; (8001b18 <printRadioSettings+0x4a8>)
 80019f0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019f4:	a807      	add	r0, sp, #28
 80019f6:	f000 fca3 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019fa:	a807      	add	r0, sp, #28
 80019fc:	f7fe fba6 	bl	800014c <strlen>
 8001a00:	230a      	movs	r3, #10
 8001a02:	b282      	uxth	r2, r0
 8001a04:	a907      	add	r1, sp, #28
 8001a06:	4842      	ldr	r0, [pc, #264]	; (8001b10 <printRadioSettings+0x4a0>)
 8001a08:	f7ff fb8a 	bl	8001120 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001a0c:	2015      	movs	r0, #21
 8001a0e:	f7ff fc17 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a12:	4942      	ldr	r1, [pc, #264]	; (8001b1c <printRadioSettings+0x4ac>)
 8001a14:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a18:	a807      	add	r0, sp, #28
 8001a1a:	f000 fc91 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a1e:	a807      	add	r0, sp, #28
 8001a20:	f7fe fb94 	bl	800014c <strlen>
 8001a24:	230a      	movs	r3, #10
 8001a26:	b282      	uxth	r2, r0
 8001a28:	a907      	add	r1, sp, #28
 8001a2a:	4839      	ldr	r0, [pc, #228]	; (8001b10 <printRadioSettings+0x4a0>)
 8001a2c:	f7ff fb78 	bl	8001120 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001a30:	2016      	movs	r0, #22
 8001a32:	f7ff fc05 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a36:	493a      	ldr	r1, [pc, #232]	; (8001b20 <printRadioSettings+0x4b0>)
 8001a38:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a3c:	a807      	add	r0, sp, #28
 8001a3e:	f000 fc7f 	bl	8002340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a42:	a807      	add	r0, sp, #28
 8001a44:	f7fe fb82 	bl	800014c <strlen>
 8001a48:	a907      	add	r1, sp, #28
 8001a4a:	b282      	uxth	r2, r0
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	4830      	ldr	r0, [pc, #192]	; (8001b10 <printRadioSettings+0x4a0>)
 8001a50:	f7ff fb66 	bl	8001120 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001a54:	201c      	movs	r0, #28
 8001a56:	f7ff fbf3 	bl	8001240 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a5a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001a5e:	9303      	str	r3, [sp, #12]
 8001a60:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001a70:	f000 0201 	and.w	r2, r0, #1
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	492b      	ldr	r1, [pc, #172]	; (8001b24 <printRadioSettings+0x4b4>)
 8001a78:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001a7c:	a807      	add	r0, sp, #28
 8001a7e:	f000 fc5f 	bl	8002340 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a82:	a807      	add	r0, sp, #28
 8001a84:	f7fe fb62 	bl	800014c <strlen>
 8001a88:	a907      	add	r1, sp, #28
 8001a8a:	b282      	uxth	r2, r0
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	4820      	ldr	r0, [pc, #128]	; (8001b10 <printRadioSettings+0x4a0>)
 8001a90:	f7ff fb46 	bl	8001120 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001a94:	201d      	movs	r0, #29
 8001a96:	f7ff fbd3 	bl	8001240 <NRF24_read_register>
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001a9a:	0742      	lsls	r2, r0, #29
 8001a9c:	bf4c      	ite	mi
 8001a9e:	4922      	ldrmi	r1, [pc, #136]	; (8001b28 <printRadioSettings+0x4b8>)
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001aa0:	4922      	ldrpl	r1, [pc, #136]	; (8001b2c <printRadioSettings+0x4bc>)
	reg8Val = NRF24_read_register(0x1d);
 8001aa2:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001aa4:	a807      	add	r0, sp, #28
 8001aa6:	f000 fc6f 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aaa:	a807      	add	r0, sp, #28
 8001aac:	f7fe fb4e 	bl	800014c <strlen>
 8001ab0:	a907      	add	r1, sp, #28
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	b282      	uxth	r2, r0
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <printRadioSettings+0x4a0>)
 8001ab8:	f7ff fb32 	bl	8001120 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001abc:	07a3      	lsls	r3, r4, #30
 8001abe:	bf4c      	ite	mi
 8001ac0:	491b      	ldrmi	r1, [pc, #108]	; (8001b30 <printRadioSettings+0x4c0>)
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ac2:	491c      	ldrpl	r1, [pc, #112]	; (8001b34 <printRadioSettings+0x4c4>)
 8001ac4:	a807      	add	r0, sp, #28
 8001ac6:	f000 fc5f 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aca:	a807      	add	r0, sp, #28
 8001acc:	f7fe fb3e 	bl	800014c <strlen>
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	b282      	uxth	r2, r0
 8001ad4:	a907      	add	r1, sp, #28
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <printRadioSettings+0x4a0>)
 8001ad8:	f7ff fb22 	bl	8001120 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <printRadioSettings+0x4c8>)
 8001ade:	a807      	add	r0, sp, #28
 8001ae0:	f000 fc52 	bl	8002388 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ae4:	a807      	add	r0, sp, #28
 8001ae6:	f7fe fb31 	bl	800014c <strlen>
 8001aea:	230a      	movs	r3, #10
 8001aec:	b282      	uxth	r2, r0
 8001aee:	a907      	add	r1, sp, #28
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <printRadioSettings+0x4a0>)
 8001af2:	f7ff fb15 	bl	8001120 <HAL_UART_Transmit>
}
 8001af6:	b020      	add	sp, #128	; 0x80
 8001af8:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <printRadioSettings+0x4cc>)
 8001afc:	e5d1      	b.n	80016a2 <printRadioSettings+0x32>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001afe:	2c01      	cmp	r4, #1
 8001b00:	d101      	bne.n	8001b06 <printRadioSettings+0x496>
 8001b02:	490f      	ldr	r1, [pc, #60]	; (8001b40 <printRadioSettings+0x4d0>)
 8001b04:	e658      	b.n	80017b8 <printRadioSettings+0x148>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001b06:	2c02      	cmp	r4, #2
 8001b08:	bf0c      	ite	eq
 8001b0a:	490e      	ldreq	r1, [pc, #56]	; (8001b44 <printRadioSettings+0x4d4>)
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001b0c:	490e      	ldrne	r1, [pc, #56]	; (8001b48 <printRadioSettings+0x4d8>)
 8001b0e:	e653      	b.n	80017b8 <printRadioSettings+0x148>
 8001b10:	200000ec 	.word	0x200000ec
 8001b14:	08002fb3 	.word	0x08002fb3
 8001b18:	08002fcc 	.word	0x08002fcc
 8001b1c:	08002fe5 	.word	0x08002fe5
 8001b20:	08002ffe 	.word	0x08002ffe
 8001b24:	08003017 	.word	0x08003017
 8001b28:	08003061 	.word	0x08003061
 8001b2c:	08003077 	.word	0x08003077
 8001b30:	0800308e 	.word	0x0800308e
 8001b34:	080030a8 	.word	0x080030a8
 8001b38:	08002ca5 	.word	0x08002ca5
 8001b3c:	08002d0f 	.word	0x08002d0f
 8001b40:	08002e1e 	.word	0x08002e1e
 8001b44:	08002e32 	.word	0x08002e32
 8001b48:	08002e45 	.word	0x08002e45

08001b4c <NRF24_begin>:
{
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b50:	4606      	mov	r6, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4614      	mov	r4, r2
 8001b56:	a906      	add	r1, sp, #24
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001b58:	2258      	movs	r2, #88	; 0x58
{
 8001b5a:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001b5e:	485f      	ldr	r0, [pc, #380]	; (8001cdc <NRF24_begin+0x190>)
 8001b60:	f000 fbda 	bl	8002318 <memcpy>
	nrf24_PORT = nrf24PORT;
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <NRF24_begin+0x194>)
 8001b66:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001b68:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <NRF24_begin+0x198>)
 8001b6a:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <NRF24_begin+0x19c>)
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001b6e:	ad02      	add	r5, sp, #8
	nrf24_CE_PIN = nrfCE_Pin;
 8001b70:	801c      	strh	r4, [r3, #0]
 8001b72:	f7ff fb31 	bl	80011d8 <NRF24_csn.part.0>
	NRF24_ce(0);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fb54 	bl	8001224 <NRF24_ce>
	HAL_Delay(5);
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f7fe fb21 	bl	80001c4 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001b82:	2108      	movs	r1, #8
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fb99 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001b8a:	213f      	movs	r1, #63	; 0x3f
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fb95 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001b92:	2103      	movs	r1, #3
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7ff fb91 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001b9a:	2103      	movs	r1, #3
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001b9c:	24e7      	movs	r4, #231	; 0xe7
	NRF24_write_register(0x03, 0x03);
 8001b9e:	4608      	mov	r0, r1
 8001ba0:	f7ff fb8c 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff fb88 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001bac:	2102      	movs	r1, #2
 8001bae:	2005      	movs	r0, #5
 8001bb0:	f7ff fb84 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	2006      	movs	r0, #6
 8001bb8:	f7ff fb80 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f7ff fb7c 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2008      	movs	r0, #8
 8001bc8:	f7ff fb78 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2009      	movs	r0, #9
 8001bd0:	f7ff fb74 	bl	80012bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001bd4:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001bd8:	4629      	mov	r1, r5
 8001bda:	2205      	movs	r2, #5
 8001bdc:	200a      	movs	r0, #10
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001bde:	f88d 4004 	strb.w	r4, [sp, #4]
 8001be2:	f88d 4003 	strb.w	r4, [sp, #3]
 8001be6:	f88d 4002 	strb.w	r4, [sp, #2]
 8001bea:	f88d 4001 	strb.w	r4, [sp, #1]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001bee:	f7ff fb7d 	bl	80012ec <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001bf2:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	200b      	movs	r0, #11
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001bfa:	f88d 3004 	strb.w	r3, [sp, #4]
 8001bfe:	f88d 3003 	strb.w	r3, [sp, #3]
 8001c02:	f88d 3002 	strb.w	r3, [sp, #2]
 8001c06:	f88d 3001 	strb.w	r3, [sp, #1]
 8001c0a:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001c0e:	f7ff fb6d 	bl	80012ec <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001c12:	21c3      	movs	r1, #195	; 0xc3
 8001c14:	200c      	movs	r0, #12
 8001c16:	f7ff fb51 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001c1a:	21c4      	movs	r1, #196	; 0xc4
 8001c1c:	200d      	movs	r0, #13
 8001c1e:	f7ff fb4d 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001c22:	21c5      	movs	r1, #197	; 0xc5
 8001c24:	200e      	movs	r0, #14
 8001c26:	f7ff fb49 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001c2a:	21c6      	movs	r1, #198	; 0xc6
 8001c2c:	200f      	movs	r0, #15
 8001c2e:	f7ff fb45 	bl	80012bc <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001c32:	2205      	movs	r2, #5
 8001c34:	4629      	mov	r1, r5
 8001c36:	2010      	movs	r0, #16
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001c38:	f88d 4004 	strb.w	r4, [sp, #4]
 8001c3c:	f88d 4003 	strb.w	r4, [sp, #3]
 8001c40:	f88d 4002 	strb.w	r4, [sp, #2]
 8001c44:	f88d 4001 	strb.w	r4, [sp, #1]
 8001c48:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001c4c:	f7ff fb4e 	bl	80012ec <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001c50:	2100      	movs	r1, #0
 8001c52:	2011      	movs	r0, #17
 8001c54:	f7ff fb32 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2012      	movs	r0, #18
 8001c5c:	f7ff fb2e 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2013      	movs	r0, #19
 8001c64:	f7ff fb2a 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2014      	movs	r0, #20
 8001c6c:	f7ff fb26 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	2015      	movs	r0, #21
 8001c74:	f7ff fb22 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2016      	movs	r0, #22
 8001c7c:	f7ff fb1e 	bl	80012bc <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001c80:	f7ff fc96 	bl	80015b0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001c84:	2100      	movs	r1, #0
 8001c86:	201c      	movs	r0, #28
 8001c88:	f7ff fb18 	bl	80012bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201d      	movs	r0, #29
 8001c90:	f7ff fb14 	bl	80012bc <NRF24_write_register>
	printRadioSettings();
 8001c94:	f7ff fcec 	bl	8001670 <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001c98:	21ff      	movs	r1, #255	; 0xff
 8001c9a:	2004      	movs	r0, #4
 8001c9c:	f7ff fb0e 	bl	80012bc <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f7ff fbf5 	bl	8001490 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_250KBPS);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f7ff fc0f 	bl	80014ca <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f7ff fc27 	bl	8001500 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8001cb2:	f7ff fbd8 	bl	8001466 <NRF24_disableDynamicPayloads>
  payload_size = MIN(size,max_payload_size);
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <NRF24_begin+0x1a0>)
 8001cba:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 8001cbc:	f7ff fc73 	bl	80015a6 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001cc0:	204c      	movs	r0, #76	; 0x4c
 8001cc2:	f7ff fbaf 	bl	8001424 <NRF24_setChannel>
	NRF24_flush_tx();
 8001cc6:	f7ff fb51 	bl	800136c <NRF24_flush_tx>
	NRF24_flush_rx();
 8001cca:	f7ff fb53 	bl	8001374 <NRF24_flush_rx>
	NRF24_powerDown();
 8001cce:	f7ff fc2a 	bl	8001526 <NRF24_powerDown>
}
 8001cd2:	b002      	add	sp, #8
 8001cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cd8:	b002      	add	sp, #8
 8001cda:	4770      	bx	lr
 8001cdc:	20000094 	.word	0x20000094
 8001ce0:	20000090 	.word	0x20000090
 8001ce4:	2000008e 	.word	0x2000008e
 8001ce8:	2000008c 	.word	0x2000008c
 8001cec:	2000012c 	.word	0x2000012c

08001cf0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	b530      	push	{r4, r5, lr}
 8001cf4:	ac03      	add	r4, sp, #12
 8001cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001cfa:	4c08      	ldr	r4, [pc, #32]	; (8001d1c <nrf24_DebugUART_Init+0x2c>)
 8001cfc:	ad03      	add	r5, sp, #12
 8001cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d16:	b004      	add	sp, #16
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000ec 	.word	0x200000ec

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d24:	2228      	movs	r2, #40	; 0x28
 8001d26:	2100      	movs	r1, #0
 8001d28:	a806      	add	r0, sp, #24
 8001d2a:	f000 fb00 	bl	800232e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2214      	movs	r2, #20
 8001d32:	a801      	add	r0, sp, #4
 8001d34:	f000 fafb 	bl	800232e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d3c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d40:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d42:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d4e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d50:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d52:	f7fe fb89 	bl	8000468 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d56:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	4621      	mov	r1, r4
 8001d62:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d64:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6c:	f7fe fd46 	bl	80007fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001d70:	b010      	add	sp, #64	; 0x40
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <main>:
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8001d78:	f7fe fa04 	bl	8000184 <HAL_Init>
  SystemClock_Config();
 8001d7c:	f7ff ffd0 	bl	8001d20 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	2210      	movs	r2, #16
 8001d82:	2100      	movs	r1, #0
 8001d84:	a81a      	add	r0, sp, #104	; 0x68
 8001d86:	f000 fad2 	bl	800232e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	4bba      	ldr	r3, [pc, #744]	; (8002074 <main+0x300>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001d8c:	f44f 7140 	mov.w	r1, #768	; 0x300
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001d92:	48b9      	ldr	r0, [pc, #740]	; (8002078 <main+0x304>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9e:	f002 0220 	and.w	r2, r2, #32
 8001da2:	9217      	str	r2, [sp, #92]	; 0x5c
 8001da4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	f042 0204 	orr.w	r2, r2, #4
 8001dae:	619a      	str	r2, [r3, #24]
 8001db0:	699a      	ldr	r2, [r3, #24]
  hspi2.Instance = SPI2;
 8001db2:	4cb2      	ldr	r4, [pc, #712]	; (800207c <main+0x308>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	f002 0204 	and.w	r2, r2, #4
 8001db8:	9218      	str	r2, [sp, #96]	; 0x60
 8001dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	699a      	ldr	r2, [r3, #24]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	f44f 7800 	mov.w	r8, #512	; 0x200
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	9319      	str	r3, [sp, #100]	; 0x64
 8001dd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001dd4:	f7fe fb42 	bl	800045c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ddc:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	a91a      	add	r1, sp, #104	; 0x68
 8001de2:	48a5      	ldr	r0, [pc, #660]	; (8002078 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	971b      	str	r7, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f7fe fa57 	bl	800029c <HAL_GPIO_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001df2:	4aa3      	ldr	r2, [pc, #652]	; (8002080 <main+0x30c>)
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001df4:	4620      	mov	r0, r4
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001df6:	e884 000c 	stmia.w	r4, {r2, r3}
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dfa:	2328      	movs	r3, #40	; 0x28
 8001dfc:	61e3      	str	r3, [r4, #28]
  hspi2.Init.CRCPolynomial = 10;
 8001dfe:	230a      	movs	r3, #10
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e00:	60a5      	str	r5, [r4, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e02:	60e5      	str	r5, [r4, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e04:	6125      	str	r5, [r4, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e06:	6165      	str	r5, [r4, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e08:	6225      	str	r5, [r4, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e0a:	6265      	str	r5, [r4, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0c:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e10:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e14:	f7fe fe0d 	bl	8000a32 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8001e18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001e1c:	4e99      	ldr	r6, [pc, #612]	; (8002084 <main+0x310>)
  huart2.Init.BaudRate = 115200;
 8001e1e:	499a      	ldr	r1, [pc, #616]	; (8002088 <main+0x314>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e20:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 115200;
 8001e22:	e886 000a 	stmia.w	r6, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e26:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e28:	60b5      	str	r5, [r6, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2a:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	60f5      	str	r5, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2e:	6135      	str	r5, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e30:	61b5      	str	r5, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e32:	61f5      	str	r5, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e34:	f7ff f946 	bl	80010c4 <HAL_UART_Init>
  NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi2);
 8001e38:	1d21      	adds	r1, r4, #4
 8001e3a:	2254      	movs	r2, #84	; 0x54
 8001e3c:	4668      	mov	r0, sp
 8001e3e:	f000 fa6b 	bl	8002318 <memcpy>
 8001e42:	6823      	ldr	r3, [r4, #0]
  nrf24_DebugUART_Init(huart2);
 8001e44:	466c      	mov	r4, sp
  NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi2);
 8001e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	488a      	ldr	r0, [pc, #552]	; (8002078 <main+0x304>)
  nrf24_DebugUART_Init(huart2);
 8001e4e:	f106 0510 	add.w	r5, r6, #16
  NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi2);
 8001e52:	f7ff fe7b 	bl	8001b4c <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8001e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e6a:	f7ff ff41 	bl	8001cf0 <nrf24_DebugUART_Init>
  	printRadioSettings();
 8001e6e:	f7ff fbff 	bl	8001670 <printRadioSettings>
  	NRF24_setAutoAck(true);
 8001e72:	4638      	mov	r0, r7
 8001e74:	f7ff fb06 	bl	8001484 <NRF24_setAutoAck>
  	NRF24_setChannel(52);
 8001e78:	2034      	movs	r0, #52	; 0x34
 8001e7a:	f7ff fad3 	bl	8001424 <NRF24_setChannel>
  	NRF24_setPayloadSize(32);
 8001e7e:	2020      	movs	r0, #32
 8001e80:	f7ff fad8 	bl	8001434 <NRF24_setPayloadSize>
  	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <main+0x318>)
 8001e86:	4638      	mov	r0, r7
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7ff fa9a 	bl	80013c4 <NRF24_openReadingPipe>
  	NRF24_enableDynamicPayloads();
 8001e90:	f7ff fbca 	bl	8001628 <NRF24_enableDynamicPayloads>
  	NRF24_enableAckPayload();
 8001e94:	f7ff fba4 	bl	80015e0 <NRF24_enableAckPayload>
  	NRF24_startListening();
 8001e98:	f7ff fa74 	bl	8001384 <NRF24_startListening>
	  			NRF24_read(myRxData,16);
 8001e9c:	4c7c      	ldr	r4, [pc, #496]	; (8002090 <main+0x31c>)
	  if(NRF24_available())
 8001e9e:	f7ff fb69 	bl	8001574 <NRF24_available>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d0fb      	beq.n	8001e9e <main+0x12a>
	  			NRF24_read(myRxData,16);
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4879      	ldr	r0, [pc, #484]	; (8002090 <main+0x31c>)
 8001eaa:	f7ff face 	bl	800144a <NRF24_read>
	  			HAL_UART_Transmit(&huart2, (uint16_t *)myRxData,16, 10);
 8001eae:	230a      	movs	r3, #10
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	4977      	ldr	r1, [pc, #476]	; (8002090 <main+0x31c>)
 8001eb4:	4630      	mov	r0, r6
 8001eb6:	f7ff f933 	bl	8001120 <HAL_UART_Transmit>
	  			if(myRxData[0]>max_pressure)
 8001eba:	8823      	ldrh	r3, [r4, #0]
 8001ebc:	2b8c      	cmp	r3, #140	; 0x8c
 8001ebe:	d920      	bls.n	8001f02 <main+0x18e>
	  				char myAckPayload[32] ="WARNING High pressure!";
 8001ec0:	4b74      	ldr	r3, [pc, #464]	; (8002094 <main+0x320>)
 8001ec2:	aa1a      	add	r2, sp, #104	; 0x68
 8001ec4:	f103 0710 	add.w	r7, r3, #16
 8001ec8:	4615      	mov	r5, r2
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	c503      	stmia	r5!, {r0, r1}
 8001ed2:	42bb      	cmp	r3, r7
 8001ed4:	462a      	mov	r2, r5
 8001ed6:	d1f7      	bne.n	8001ec8 <main+0x154>
 8001ed8:	8899      	ldrh	r1, [r3, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	799b      	ldrb	r3, [r3, #6]
 8001ede:	6028      	str	r0, [r5, #0]
 8001ee0:	71ab      	strb	r3, [r5, #6]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	80a9      	strh	r1, [r5, #4]
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001ee6:	a81a      	add	r0, sp, #104	; 0x68
	  				char myAckPayload[32] ="WARNING High pressure!";
 8001ee8:	f8cd 307f 	str.w	r3, [sp, #127]	; 0x7f
 8001eec:	f8cd 3083 	str.w	r3, [sp, #131]	; 0x83
 8001ef0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001ef4:	f7fe f92a 	bl	800014c <strlen>
 8001ef8:	a91a      	add	r1, sp, #104	; 0x68
 8001efa:	b2c2      	uxtb	r2, r0
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff fb3c 	bl	800157a <NRF24_writeAckPayload>
	  		    if (myRxData[1]>max_temp)
 8001f02:	8863      	ldrh	r3, [r4, #2]
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d91a      	bls.n	8001f3e <main+0x1ca>
	  				char myAckPayload[32] ="WARNING High temperature!";
 8001f08:	4b63      	ldr	r3, [pc, #396]	; (8002098 <main+0x324>)
 8001f0a:	aa1a      	add	r2, sp, #104	; 0x68
 8001f0c:	f103 0718 	add.w	r7, r3, #24
 8001f10:	4615      	mov	r5, r2
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	3308      	adds	r3, #8
 8001f18:	c503      	stmia	r5!, {r0, r1}
 8001f1a:	42bb      	cmp	r3, r7
 8001f1c:	462a      	mov	r2, r5
 8001f1e:	d1f7      	bne.n	8001f10 <main+0x19c>
 8001f20:	881b      	ldrh	r3, [r3, #0]
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001f22:	a81a      	add	r0, sp, #104	; 0x68
	  				char myAckPayload[32] ="WARNING High temperature!";
 8001f24:	802b      	strh	r3, [r5, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8cd 3082 	str.w	r3, [sp, #130]	; 0x82
 8001f2c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001f30:	f7fe f90c 	bl	800014c <strlen>
 8001f34:	a91a      	add	r1, sp, #104	; 0x68
 8001f36:	b2c2      	uxtb	r2, r0
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff fb1e 	bl	800157a <NRF24_writeAckPayload>
	  		    if (myRxData[2]>max_speed)
 8001f3e:	88a3      	ldrh	r3, [r4, #4]
 8001f40:	2b8c      	cmp	r3, #140	; 0x8c
 8001f42:	d91d      	bls.n	8001f80 <main+0x20c>
	  				char myAckPayload[32] ="WARNING Max speed!";
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <main+0x328>)
 8001f46:	aa1a      	add	r2, sp, #104	; 0x68
 8001f48:	f103 0710 	add.w	r7, r3, #16
 8001f4c:	4615      	mov	r5, r2
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	3308      	adds	r3, #8
 8001f54:	c503      	stmia	r5!, {r0, r1}
 8001f56:	42bb      	cmp	r3, r7
 8001f58:	462a      	mov	r2, r5
 8001f5a:	d1f7      	bne.n	8001f4c <main+0x1d8>
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	789b      	ldrb	r3, [r3, #2]
 8001f60:	220d      	movs	r2, #13
 8001f62:	8029      	strh	r1, [r5, #0]
 8001f64:	70ab      	strb	r3, [r5, #2]
 8001f66:	2100      	movs	r1, #0
 8001f68:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8001f6c:	f000 f9df 	bl	800232e <memset>
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001f70:	a81a      	add	r0, sp, #104	; 0x68
 8001f72:	f7fe f8eb 	bl	800014c <strlen>
 8001f76:	a91a      	add	r1, sp, #104	; 0x68
 8001f78:	b2c2      	uxtb	r2, r0
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff fafd 	bl	800157a <NRF24_writeAckPayload>
	  		    if (myRxData[3]>max_rpm)
 8001f80:	88e3      	ldrh	r3, [r4, #6]
 8001f82:	2ba0      	cmp	r3, #160	; 0xa0
 8001f84:	d91b      	bls.n	8001fbe <main+0x24a>
	  				char myAckPayload[32] ="WARNING Max RPM!";
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <main+0x32c>)
 8001f88:	aa1a      	add	r2, sp, #104	; 0x68
 8001f8a:	f103 0710 	add.w	r7, r3, #16
 8001f8e:	4615      	mov	r5, r2
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	3308      	adds	r3, #8
 8001f96:	c503      	stmia	r5!, {r0, r1}
 8001f98:	42bb      	cmp	r3, r7
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	d1f7      	bne.n	8001f8e <main+0x21a>
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	702b      	strb	r3, [r5, #0]
 8001fa6:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8001faa:	f000 f9c0 	bl	800232e <memset>
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001fae:	a81a      	add	r0, sp, #104	; 0x68
 8001fb0:	f7fe f8cc 	bl	800014c <strlen>
 8001fb4:	a91a      	add	r1, sp, #104	; 0x68
 8001fb6:	b2c2      	uxtb	r2, r0
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff fade 	bl	800157a <NRF24_writeAckPayload>
	  			if (myRxData[4]<min_voltage)
 8001fbe:	8923      	ldrh	r3, [r4, #8]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d81c      	bhi.n	8001ffe <main+0x28a>
	  				char myAckPayload[32] ="WARNING Low battery voltage!";
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <main+0x330>)
 8001fc6:	aa1a      	add	r2, sp, #104	; 0x68
 8001fc8:	f103 0718 	add.w	r7, r3, #24
 8001fcc:	4615      	mov	r5, r2
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	c503      	stmia	r5!, {r0, r1}
 8001fd6:	42bb      	cmp	r3, r7
 8001fd8:	462a      	mov	r2, r5
 8001fda:	d1f7      	bne.n	8001fcc <main+0x258>
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	791b      	ldrb	r3, [r3, #4]
 8001fe0:	6028      	str	r0, [r5, #0]
 8001fe2:	712b      	strb	r3, [r5, #4]
 8001fe4:	2300      	movs	r3, #0
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001fe6:	a81a      	add	r0, sp, #104	; 0x68
	  				char myAckPayload[32] ="WARNING Low battery voltage!";
 8001fe8:	f8ad 3085 	strh.w	r3, [sp, #133]	; 0x85
 8001fec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8001ff0:	f7fe f8ac 	bl	800014c <strlen>
 8001ff4:	a91a      	add	r1, sp, #104	; 0x68
 8001ff6:	b2c2      	uxtb	r2, r0
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fabe 	bl	800157a <NRF24_writeAckPayload>
	  			if (myRxData[5]>max_acceleration)
 8001ffe:	8963      	ldrh	r3, [r4, #10]
 8002000:	2b8c      	cmp	r3, #140	; 0x8c
 8002002:	d91a      	bls.n	800203a <main+0x2c6>
	  				char myAckPayload[32] ="WARNING Max acceleration!";
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <main+0x334>)
 8002006:	aa1a      	add	r2, sp, #104	; 0x68
 8002008:	f103 0718 	add.w	r7, r3, #24
 800200c:	4615      	mov	r5, r2
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	3308      	adds	r3, #8
 8002014:	c503      	stmia	r5!, {r0, r1}
 8002016:	42bb      	cmp	r3, r7
 8002018:	462a      	mov	r2, r5
 800201a:	d1f7      	bne.n	800200c <main+0x298>
 800201c:	881b      	ldrh	r3, [r3, #0]
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 800201e:	a81a      	add	r0, sp, #104	; 0x68
	  				char myAckPayload[32] ="WARNING Max acceleration!";
 8002020:	802b      	strh	r3, [r5, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	f8cd 3082 	str.w	r3, [sp, #130]	; 0x82
 8002028:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 800202c:	f7fe f88e 	bl	800014c <strlen>
 8002030:	a91a      	add	r1, sp, #104	; 0x68
 8002032:	b2c2      	uxtb	r2, r0
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff faa0 	bl	800157a <NRF24_writeAckPayload>
	  			if (myRxData[7]>max_steering)
 800203a:	89e3      	ldrh	r3, [r4, #14]
 800203c:	2bc8      	cmp	r3, #200	; 0xc8
 800203e:	f67f af2e 	bls.w	8001e9e <main+0x12a>
	  				char myAckPayload[32] ="WARNING Max steering angle!";
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <main+0x338>)
 8002044:	aa1a      	add	r2, sp, #104	; 0x68
 8002046:	f103 0718 	add.w	r7, r3, #24
 800204a:	4615      	mov	r5, r2
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	3308      	adds	r3, #8
 8002052:	c503      	stmia	r5!, {r0, r1}
 8002054:	42bb      	cmp	r3, r7
 8002056:	462a      	mov	r2, r5
 8002058:	d1f7      	bne.n	800204a <main+0x2d6>
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	6028      	str	r0, [r5, #0]
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8002060:	a81a      	add	r0, sp, #104	; 0x68
	  				char myAckPayload[32] ="WARNING Max steering angle!";
 8002062:	9321      	str	r3, [sp, #132]	; 0x84
	  				NRF24_writeAckPayload(1, myAckPayload, strlen(myAckPayload));
 8002064:	f7fe f872 	bl	800014c <strlen>
 8002068:	a91a      	add	r1, sp, #104	; 0x68
 800206a:	b2c2      	uxtb	r2, r0
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff fa84 	bl	800157a <NRF24_writeAckPayload>
 8002072:	e714      	b.n	8001e9e <main+0x12a>
 8002074:	40021000 	.word	0x40021000
 8002078:	40010800 	.word	0x40010800
 800207c:	20000148 	.word	0x20000148
 8002080:	40003800 	.word	0x40003800
 8002084:	200001b0 	.word	0x200001b0
 8002088:	40004400 	.word	0x40004400
 800208c:	20000000 	.word	0x20000000
 8002090:	200001a0 	.word	0x200001a0
 8002094:	08002bb8 	.word	0x08002bb8
 8002098:	08002bd8 	.word	0x08002bd8
 800209c:	08002bf8 	.word	0x08002bf8
 80020a0:	08002c18 	.word	0x08002c18
 80020a4:	08002c38 	.word	0x08002c38
 80020a8:	08002c58 	.word	0x08002c58
 80020ac:	08002c78 	.word	0x08002c78

080020b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_MspInit+0x40>)
{
 80020b2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	619a      	str	r2, [r3, #24]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	f002 0201 	and.w	r2, r2, #1
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020cc:	61da      	str	r2, [r3, #28]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_MspInit+0x44>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	b002      	add	sp, #8
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4604      	mov	r4, r0
 80020fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	2210      	movs	r2, #16
 8002100:	2100      	movs	r1, #0
 8002102:	a802      	add	r0, sp, #8
 8002104:	f000 f913 	bl	800232e <memset>
  if(hspi->Instance==SPI2)
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0x70>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d128      	bne.n	8002162 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002110:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8002114:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211c:	61da      	str	r2, [r3, #28]
 800211e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	4812      	ldr	r0, [pc, #72]	; (800216c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002122:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002126:	9200      	str	r2, [sp, #0]
 8002128:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	f042 0208 	orr.w	r2, r2, #8
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800213c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002140:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f7fe f8a7 	bl	800029c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800214e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002152:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	a902      	add	r1, sp, #8
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f7fe f89d 	bl	800029c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002162:	b006      	add	sp, #24
 8002164:	bd10      	pop	{r4, pc}
 8002166:	bf00      	nop
 8002168:	40003800 	.word	0x40003800
 800216c:	40010c00 	.word	0x40010c00

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b510      	push	{r4, lr}
 8002172:	4604      	mov	r4, r0
 8002174:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	2210      	movs	r2, #16
 8002178:	2100      	movs	r1, #0
 800217a:	a802      	add	r0, sp, #8
 800217c:	f000 f8d7 	bl	800232e <memset>
  if(huart->Instance==USART2)
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_UART_MspInit+0x6c>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d126      	bne.n	80021d6 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002188:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800218c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002190:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002194:	61da      	str	r2, [r3, #28]
 8002196:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	4811      	ldr	r0, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800219a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	619a      	str	r2, [r3, #24]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b4:	2304      	movs	r3, #4
 80021b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f7fe f86c 	bl	800029c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021c4:	2308      	movs	r3, #8
 80021c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	a902      	add	r1, sp, #8
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f7fe f863 	bl	800029c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d6:	b006      	add	sp, #24
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	bf00      	nop
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40010800 	.word	0x40010800

080021e4 <NMI_Handler>:
 80021e4:	4770      	bx	lr

080021e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e6:	e7fe      	b.n	80021e6 <HardFault_Handler>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	e7fe      	b.n	80021ec <UsageFault_Handler>

080021ee <SVC_Handler>:
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f7fd bfd8 	b.w	80001a8 <HAL_IncTick>

080021f8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80021f8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <_sbrk+0x2c>)
{
 80021fc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	b909      	cbnz	r1, 8002206 <_sbrk+0xe>
		heap_end = &end;
 8002202:	4909      	ldr	r1, [pc, #36]	; (8002228 <_sbrk+0x30>)
 8002204:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002206:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002208:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800220a:	4402      	add	r2, r0
 800220c:	428a      	cmp	r2, r1
 800220e:	d906      	bls.n	800221e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002210:	f000 f858 	bl	80022c4 <__errno>
 8002214:	230c      	movs	r3, #12
 8002216:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800221e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002220:	bd08      	pop	{r3, pc}
 8002222:	bf00      	nop
 8002224:	20000138 	.word	0x20000138
 8002228:	200001f4 	.word	0x200001f4

0800222c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <SystemInit+0x40>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <SystemInit+0x44>)
 800223a:	400a      	ands	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002244:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002248:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002250:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002258:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800225a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800225e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <SystemInit+0x48>)
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	f8ff0000 	.word	0xf8ff0000
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002278:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800227a:	e003      	b.n	8002284 <LoopCopyDataInit>

0800227c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800227e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002280:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002282:	3104      	adds	r1, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002288:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800228c:	d3f6      	bcc.n	800227c <CopyDataInit>
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002290:	e002      	b.n	8002298 <LoopFillZerobss>

08002292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002294:	f842 3b04 	str.w	r3, [r2], #4

08002298 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800229a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800229c:	d3f9      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229e:	f7ff ffc5 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f000 f815 	bl	80022d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a6:	f7ff fd65 	bl	8001d74 <main>
  bx lr
 80022aa:	4770      	bx	lr
  ldr r3, =_sidata
 80022ac:	08003118 	.word	0x08003118
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022b4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80022b8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80022bc:	200001f4 	.word	0x200001f4

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>
	...

080022c4 <__errno>:
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <__errno+0x8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	2000000c 	.word	0x2000000c

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	2500      	movs	r5, #0
 80022d4:	4e0c      	ldr	r6, [pc, #48]	; (8002308 <__libc_init_array+0x38>)
 80022d6:	4c0d      	ldr	r4, [pc, #52]	; (800230c <__libc_init_array+0x3c>)
 80022d8:	1ba4      	subs	r4, r4, r6
 80022da:	10a4      	asrs	r4, r4, #2
 80022dc:	42a5      	cmp	r5, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	f000 fc56 	bl	8002b90 <_init>
 80022e4:	2500      	movs	r5, #0
 80022e6:	4e0a      	ldr	r6, [pc, #40]	; (8002310 <__libc_init_array+0x40>)
 80022e8:	4c0a      	ldr	r4, [pc, #40]	; (8002314 <__libc_init_array+0x44>)
 80022ea:	1ba4      	subs	r4, r4, r6
 80022ec:	10a4      	asrs	r4, r4, #2
 80022ee:	42a5      	cmp	r5, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022f8:	4798      	blx	r3
 80022fa:	3501      	adds	r5, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002302:	4798      	blx	r3
 8002304:	3501      	adds	r5, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	08003110 	.word	0x08003110
 800230c:	08003110 	.word	0x08003110
 8002310:	08003110 	.word	0x08003110
 8002314:	08003114 	.word	0x08003114

08002318 <memcpy>:
 8002318:	b510      	push	{r4, lr}
 800231a:	1e43      	subs	r3, r0, #1
 800231c:	440a      	add	r2, r1
 800231e:	4291      	cmp	r1, r2
 8002320:	d100      	bne.n	8002324 <memcpy+0xc>
 8002322:	bd10      	pop	{r4, pc}
 8002324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800232c:	e7f7      	b.n	800231e <memcpy+0x6>

0800232e <memset>:
 800232e:	4603      	mov	r3, r0
 8002330:	4402      	add	r2, r0
 8002332:	4293      	cmp	r3, r2
 8002334:	d100      	bne.n	8002338 <memset+0xa>
 8002336:	4770      	bx	lr
 8002338:	f803 1b01 	strb.w	r1, [r3], #1
 800233c:	e7f9      	b.n	8002332 <memset+0x4>
	...

08002340 <siprintf>:
 8002340:	b40e      	push	{r1, r2, r3}
 8002342:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002346:	b500      	push	{lr}
 8002348:	b09c      	sub	sp, #112	; 0x70
 800234a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800234e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002352:	9104      	str	r1, [sp, #16]
 8002354:	9107      	str	r1, [sp, #28]
 8002356:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800235a:	ab1d      	add	r3, sp, #116	; 0x74
 800235c:	9002      	str	r0, [sp, #8]
 800235e:	9006      	str	r0, [sp, #24]
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <siprintf+0x44>)
 8002362:	f853 2b04 	ldr.w	r2, [r3], #4
 8002366:	f8ad 1016 	strh.w	r1, [sp, #22]
 800236a:	6800      	ldr	r0, [r0, #0]
 800236c:	a902      	add	r1, sp, #8
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	f000 f86e 	bl	8002450 <_svfiprintf_r>
 8002374:	2200      	movs	r2, #0
 8002376:	9b02      	ldr	r3, [sp, #8]
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	b01c      	add	sp, #112	; 0x70
 800237c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002380:	b003      	add	sp, #12
 8002382:	4770      	bx	lr
 8002384:	2000000c 	.word	0x2000000c

08002388 <strcpy>:
 8002388:	4603      	mov	r3, r0
 800238a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800238e:	f803 2b01 	strb.w	r2, [r3], #1
 8002392:	2a00      	cmp	r2, #0
 8002394:	d1f9      	bne.n	800238a <strcpy+0x2>
 8002396:	4770      	bx	lr

08002398 <__ssputs_r>:
 8002398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800239c:	688e      	ldr	r6, [r1, #8]
 800239e:	4682      	mov	sl, r0
 80023a0:	429e      	cmp	r6, r3
 80023a2:	460c      	mov	r4, r1
 80023a4:	4691      	mov	r9, r2
 80023a6:	4698      	mov	r8, r3
 80023a8:	d835      	bhi.n	8002416 <__ssputs_r+0x7e>
 80023aa:	898a      	ldrh	r2, [r1, #12]
 80023ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023b0:	d031      	beq.n	8002416 <__ssputs_r+0x7e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	6825      	ldr	r5, [r4, #0]
 80023b6:	6909      	ldr	r1, [r1, #16]
 80023b8:	1a6f      	subs	r7, r5, r1
 80023ba:	6965      	ldr	r5, [r4, #20]
 80023bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80023c4:	f108 0301 	add.w	r3, r8, #1
 80023c8:	443b      	add	r3, r7
 80023ca:	429d      	cmp	r5, r3
 80023cc:	bf38      	it	cc
 80023ce:	461d      	movcc	r5, r3
 80023d0:	0553      	lsls	r3, r2, #21
 80023d2:	d531      	bpl.n	8002438 <__ssputs_r+0xa0>
 80023d4:	4629      	mov	r1, r5
 80023d6:	f000 fb3b 	bl	8002a50 <_malloc_r>
 80023da:	4606      	mov	r6, r0
 80023dc:	b950      	cbnz	r0, 80023f4 <__ssputs_r+0x5c>
 80023de:	230c      	movs	r3, #12
 80023e0:	f8ca 3000 	str.w	r3, [sl]
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ee:	81a3      	strh	r3, [r4, #12]
 80023f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f4:	463a      	mov	r2, r7
 80023f6:	6921      	ldr	r1, [r4, #16]
 80023f8:	f7ff ff8e 	bl	8002318 <memcpy>
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	6126      	str	r6, [r4, #16]
 800240a:	443e      	add	r6, r7
 800240c:	6026      	str	r6, [r4, #0]
 800240e:	4646      	mov	r6, r8
 8002410:	6165      	str	r5, [r4, #20]
 8002412:	1bed      	subs	r5, r5, r7
 8002414:	60a5      	str	r5, [r4, #8]
 8002416:	4546      	cmp	r6, r8
 8002418:	bf28      	it	cs
 800241a:	4646      	movcs	r6, r8
 800241c:	4649      	mov	r1, r9
 800241e:	4632      	mov	r2, r6
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	f000 faaf 	bl	8002984 <memmove>
 8002426:	68a3      	ldr	r3, [r4, #8]
 8002428:	2000      	movs	r0, #0
 800242a:	1b9b      	subs	r3, r3, r6
 800242c:	60a3      	str	r3, [r4, #8]
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	441e      	add	r6, r3
 8002432:	6026      	str	r6, [r4, #0]
 8002434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002438:	462a      	mov	r2, r5
 800243a:	f000 fb67 	bl	8002b0c <_realloc_r>
 800243e:	4606      	mov	r6, r0
 8002440:	2800      	cmp	r0, #0
 8002442:	d1e1      	bne.n	8002408 <__ssputs_r+0x70>
 8002444:	6921      	ldr	r1, [r4, #16]
 8002446:	4650      	mov	r0, sl
 8002448:	f000 fab6 	bl	80029b8 <_free_r>
 800244c:	e7c7      	b.n	80023de <__ssputs_r+0x46>
	...

08002450 <_svfiprintf_r>:
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002454:	b09d      	sub	sp, #116	; 0x74
 8002456:	9303      	str	r3, [sp, #12]
 8002458:	898b      	ldrh	r3, [r1, #12]
 800245a:	4680      	mov	r8, r0
 800245c:	061c      	lsls	r4, r3, #24
 800245e:	460d      	mov	r5, r1
 8002460:	4616      	mov	r6, r2
 8002462:	d50f      	bpl.n	8002484 <_svfiprintf_r+0x34>
 8002464:	690b      	ldr	r3, [r1, #16]
 8002466:	b96b      	cbnz	r3, 8002484 <_svfiprintf_r+0x34>
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	f000 faf1 	bl	8002a50 <_malloc_r>
 800246e:	6028      	str	r0, [r5, #0]
 8002470:	6128      	str	r0, [r5, #16]
 8002472:	b928      	cbnz	r0, 8002480 <_svfiprintf_r+0x30>
 8002474:	230c      	movs	r3, #12
 8002476:	f8c8 3000 	str.w	r3, [r8]
 800247a:	f04f 30ff 	mov.w	r0, #4294967295
 800247e:	e0c4      	b.n	800260a <_svfiprintf_r+0x1ba>
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	616b      	str	r3, [r5, #20]
 8002484:	2300      	movs	r3, #0
 8002486:	9309      	str	r3, [sp, #36]	; 0x24
 8002488:	2320      	movs	r3, #32
 800248a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800248e:	2330      	movs	r3, #48	; 0x30
 8002490:	f04f 0b01 	mov.w	fp, #1
 8002494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002498:	4637      	mov	r7, r6
 800249a:	463c      	mov	r4, r7
 800249c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d13c      	bne.n	800251e <_svfiprintf_r+0xce>
 80024a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80024a8:	d00b      	beq.n	80024c2 <_svfiprintf_r+0x72>
 80024aa:	4653      	mov	r3, sl
 80024ac:	4632      	mov	r2, r6
 80024ae:	4629      	mov	r1, r5
 80024b0:	4640      	mov	r0, r8
 80024b2:	f7ff ff71 	bl	8002398 <__ssputs_r>
 80024b6:	3001      	adds	r0, #1
 80024b8:	f000 80a2 	beq.w	8002600 <_svfiprintf_r+0x1b0>
 80024bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024be:	4453      	add	r3, sl
 80024c0:	9309      	str	r3, [sp, #36]	; 0x24
 80024c2:	783b      	ldrb	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 809b 	beq.w	8002600 <_svfiprintf_r+0x1b0>
 80024ca:	2300      	movs	r3, #0
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	9205      	str	r2, [sp, #20]
 80024d6:	9306      	str	r3, [sp, #24]
 80024d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024dc:	931a      	str	r3, [sp, #104]	; 0x68
 80024de:	2205      	movs	r2, #5
 80024e0:	7821      	ldrb	r1, [r4, #0]
 80024e2:	4850      	ldr	r0, [pc, #320]	; (8002624 <_svfiprintf_r+0x1d4>)
 80024e4:	f000 fa40 	bl	8002968 <memchr>
 80024e8:	1c67      	adds	r7, r4, #1
 80024ea:	9b04      	ldr	r3, [sp, #16]
 80024ec:	b9d8      	cbnz	r0, 8002526 <_svfiprintf_r+0xd6>
 80024ee:	06d9      	lsls	r1, r3, #27
 80024f0:	bf44      	itt	mi
 80024f2:	2220      	movmi	r2, #32
 80024f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024f8:	071a      	lsls	r2, r3, #28
 80024fa:	bf44      	itt	mi
 80024fc:	222b      	movmi	r2, #43	; 0x2b
 80024fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002502:	7822      	ldrb	r2, [r4, #0]
 8002504:	2a2a      	cmp	r2, #42	; 0x2a
 8002506:	d016      	beq.n	8002536 <_svfiprintf_r+0xe6>
 8002508:	2100      	movs	r1, #0
 800250a:	200a      	movs	r0, #10
 800250c:	9a07      	ldr	r2, [sp, #28]
 800250e:	4627      	mov	r7, r4
 8002510:	783b      	ldrb	r3, [r7, #0]
 8002512:	3401      	adds	r4, #1
 8002514:	3b30      	subs	r3, #48	; 0x30
 8002516:	2b09      	cmp	r3, #9
 8002518:	d950      	bls.n	80025bc <_svfiprintf_r+0x16c>
 800251a:	b1c9      	cbz	r1, 8002550 <_svfiprintf_r+0x100>
 800251c:	e011      	b.n	8002542 <_svfiprintf_r+0xf2>
 800251e:	2b25      	cmp	r3, #37	; 0x25
 8002520:	d0c0      	beq.n	80024a4 <_svfiprintf_r+0x54>
 8002522:	4627      	mov	r7, r4
 8002524:	e7b9      	b.n	800249a <_svfiprintf_r+0x4a>
 8002526:	4a3f      	ldr	r2, [pc, #252]	; (8002624 <_svfiprintf_r+0x1d4>)
 8002528:	463c      	mov	r4, r7
 800252a:	1a80      	subs	r0, r0, r2
 800252c:	fa0b f000 	lsl.w	r0, fp, r0
 8002530:	4318      	orrs	r0, r3
 8002532:	9004      	str	r0, [sp, #16]
 8002534:	e7d3      	b.n	80024de <_svfiprintf_r+0x8e>
 8002536:	9a03      	ldr	r2, [sp, #12]
 8002538:	1d11      	adds	r1, r2, #4
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	9103      	str	r1, [sp, #12]
 800253e:	2a00      	cmp	r2, #0
 8002540:	db01      	blt.n	8002546 <_svfiprintf_r+0xf6>
 8002542:	9207      	str	r2, [sp, #28]
 8002544:	e004      	b.n	8002550 <_svfiprintf_r+0x100>
 8002546:	4252      	negs	r2, r2
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	9207      	str	r2, [sp, #28]
 800254e:	9304      	str	r3, [sp, #16]
 8002550:	783b      	ldrb	r3, [r7, #0]
 8002552:	2b2e      	cmp	r3, #46	; 0x2e
 8002554:	d10d      	bne.n	8002572 <_svfiprintf_r+0x122>
 8002556:	787b      	ldrb	r3, [r7, #1]
 8002558:	1c79      	adds	r1, r7, #1
 800255a:	2b2a      	cmp	r3, #42	; 0x2a
 800255c:	d132      	bne.n	80025c4 <_svfiprintf_r+0x174>
 800255e:	9b03      	ldr	r3, [sp, #12]
 8002560:	3702      	adds	r7, #2
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	9203      	str	r2, [sp, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	bfb8      	it	lt
 800256c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002570:	9305      	str	r3, [sp, #20]
 8002572:	4c2d      	ldr	r4, [pc, #180]	; (8002628 <_svfiprintf_r+0x1d8>)
 8002574:	2203      	movs	r2, #3
 8002576:	7839      	ldrb	r1, [r7, #0]
 8002578:	4620      	mov	r0, r4
 800257a:	f000 f9f5 	bl	8002968 <memchr>
 800257e:	b138      	cbz	r0, 8002590 <_svfiprintf_r+0x140>
 8002580:	2340      	movs	r3, #64	; 0x40
 8002582:	1b00      	subs	r0, r0, r4
 8002584:	fa03 f000 	lsl.w	r0, r3, r0
 8002588:	9b04      	ldr	r3, [sp, #16]
 800258a:	3701      	adds	r7, #1
 800258c:	4303      	orrs	r3, r0
 800258e:	9304      	str	r3, [sp, #16]
 8002590:	7839      	ldrb	r1, [r7, #0]
 8002592:	2206      	movs	r2, #6
 8002594:	4825      	ldr	r0, [pc, #148]	; (800262c <_svfiprintf_r+0x1dc>)
 8002596:	1c7e      	adds	r6, r7, #1
 8002598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800259c:	f000 f9e4 	bl	8002968 <memchr>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d035      	beq.n	8002610 <_svfiprintf_r+0x1c0>
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <_svfiprintf_r+0x1e0>)
 80025a6:	b9fb      	cbnz	r3, 80025e8 <_svfiprintf_r+0x198>
 80025a8:	9b03      	ldr	r3, [sp, #12]
 80025aa:	3307      	adds	r3, #7
 80025ac:	f023 0307 	bic.w	r3, r3, #7
 80025b0:	3308      	adds	r3, #8
 80025b2:	9303      	str	r3, [sp, #12]
 80025b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025b6:	444b      	add	r3, r9
 80025b8:	9309      	str	r3, [sp, #36]	; 0x24
 80025ba:	e76d      	b.n	8002498 <_svfiprintf_r+0x48>
 80025bc:	fb00 3202 	mla	r2, r0, r2, r3
 80025c0:	2101      	movs	r1, #1
 80025c2:	e7a4      	b.n	800250e <_svfiprintf_r+0xbe>
 80025c4:	2300      	movs	r3, #0
 80025c6:	240a      	movs	r4, #10
 80025c8:	4618      	mov	r0, r3
 80025ca:	9305      	str	r3, [sp, #20]
 80025cc:	460f      	mov	r7, r1
 80025ce:	783a      	ldrb	r2, [r7, #0]
 80025d0:	3101      	adds	r1, #1
 80025d2:	3a30      	subs	r2, #48	; 0x30
 80025d4:	2a09      	cmp	r2, #9
 80025d6:	d903      	bls.n	80025e0 <_svfiprintf_r+0x190>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ca      	beq.n	8002572 <_svfiprintf_r+0x122>
 80025dc:	9005      	str	r0, [sp, #20]
 80025de:	e7c8      	b.n	8002572 <_svfiprintf_r+0x122>
 80025e0:	fb04 2000 	mla	r0, r4, r0, r2
 80025e4:	2301      	movs	r3, #1
 80025e6:	e7f1      	b.n	80025cc <_svfiprintf_r+0x17c>
 80025e8:	ab03      	add	r3, sp, #12
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	462a      	mov	r2, r5
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_svfiprintf_r+0x1e4>)
 80025f0:	a904      	add	r1, sp, #16
 80025f2:	4640      	mov	r0, r8
 80025f4:	f3af 8000 	nop.w
 80025f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025fc:	4681      	mov	r9, r0
 80025fe:	d1d9      	bne.n	80025b4 <_svfiprintf_r+0x164>
 8002600:	89ab      	ldrh	r3, [r5, #12]
 8002602:	065b      	lsls	r3, r3, #25
 8002604:	f53f af39 	bmi.w	800247a <_svfiprintf_r+0x2a>
 8002608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800260a:	b01d      	add	sp, #116	; 0x74
 800260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002610:	ab03      	add	r3, sp, #12
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	462a      	mov	r2, r5
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_svfiprintf_r+0x1e4>)
 8002618:	a904      	add	r1, sp, #16
 800261a:	4640      	mov	r0, r8
 800261c:	f000 f884 	bl	8002728 <_printf_i>
 8002620:	e7ea      	b.n	80025f8 <_svfiprintf_r+0x1a8>
 8002622:	bf00      	nop
 8002624:	080030db 	.word	0x080030db
 8002628:	080030e1 	.word	0x080030e1
 800262c:	080030e5 	.word	0x080030e5
 8002630:	00000000 	.word	0x00000000
 8002634:	08002399 	.word	0x08002399

08002638 <_printf_common>:
 8002638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800263c:	4691      	mov	r9, r2
 800263e:	461f      	mov	r7, r3
 8002640:	688a      	ldr	r2, [r1, #8]
 8002642:	690b      	ldr	r3, [r1, #16]
 8002644:	4606      	mov	r6, r0
 8002646:	4293      	cmp	r3, r2
 8002648:	bfb8      	it	lt
 800264a:	4613      	movlt	r3, r2
 800264c:	f8c9 3000 	str.w	r3, [r9]
 8002650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002654:	460c      	mov	r4, r1
 8002656:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800265a:	b112      	cbz	r2, 8002662 <_printf_common+0x2a>
 800265c:	3301      	adds	r3, #1
 800265e:	f8c9 3000 	str.w	r3, [r9]
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	0699      	lsls	r1, r3, #26
 8002666:	bf42      	ittt	mi
 8002668:	f8d9 3000 	ldrmi.w	r3, [r9]
 800266c:	3302      	addmi	r3, #2
 800266e:	f8c9 3000 	strmi.w	r3, [r9]
 8002672:	6825      	ldr	r5, [r4, #0]
 8002674:	f015 0506 	ands.w	r5, r5, #6
 8002678:	d107      	bne.n	800268a <_printf_common+0x52>
 800267a:	f104 0a19 	add.w	sl, r4, #25
 800267e:	68e3      	ldr	r3, [r4, #12]
 8002680:	f8d9 2000 	ldr.w	r2, [r9]
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	429d      	cmp	r5, r3
 8002688:	db2a      	blt.n	80026e0 <_printf_common+0xa8>
 800268a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	3300      	adds	r3, #0
 8002692:	bf18      	it	ne
 8002694:	2301      	movne	r3, #1
 8002696:	0692      	lsls	r2, r2, #26
 8002698:	d42f      	bmi.n	80026fa <_printf_common+0xc2>
 800269a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800269e:	4639      	mov	r1, r7
 80026a0:	4630      	mov	r0, r6
 80026a2:	47c0      	blx	r8
 80026a4:	3001      	adds	r0, #1
 80026a6:	d022      	beq.n	80026ee <_printf_common+0xb6>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	68e5      	ldr	r5, [r4, #12]
 80026ac:	f003 0306 	and.w	r3, r3, #6
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	bf18      	it	ne
 80026b4:	2500      	movne	r5, #0
 80026b6:	f8d9 2000 	ldr.w	r2, [r9]
 80026ba:	f04f 0900 	mov.w	r9, #0
 80026be:	bf08      	it	eq
 80026c0:	1aad      	subeq	r5, r5, r2
 80026c2:	68a3      	ldr	r3, [r4, #8]
 80026c4:	6922      	ldr	r2, [r4, #16]
 80026c6:	bf08      	it	eq
 80026c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bfc4      	itt	gt
 80026d0:	1a9b      	subgt	r3, r3, r2
 80026d2:	18ed      	addgt	r5, r5, r3
 80026d4:	341a      	adds	r4, #26
 80026d6:	454d      	cmp	r5, r9
 80026d8:	d11b      	bne.n	8002712 <_printf_common+0xda>
 80026da:	2000      	movs	r0, #0
 80026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e0:	2301      	movs	r3, #1
 80026e2:	4652      	mov	r2, sl
 80026e4:	4639      	mov	r1, r7
 80026e6:	4630      	mov	r0, r6
 80026e8:	47c0      	blx	r8
 80026ea:	3001      	adds	r0, #1
 80026ec:	d103      	bne.n	80026f6 <_printf_common+0xbe>
 80026ee:	f04f 30ff 	mov.w	r0, #4294967295
 80026f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f6:	3501      	adds	r5, #1
 80026f8:	e7c1      	b.n	800267e <_printf_common+0x46>
 80026fa:	2030      	movs	r0, #48	; 0x30
 80026fc:	18e1      	adds	r1, r4, r3
 80026fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002708:	4422      	add	r2, r4
 800270a:	3302      	adds	r3, #2
 800270c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002710:	e7c3      	b.n	800269a <_printf_common+0x62>
 8002712:	2301      	movs	r3, #1
 8002714:	4622      	mov	r2, r4
 8002716:	4639      	mov	r1, r7
 8002718:	4630      	mov	r0, r6
 800271a:	47c0      	blx	r8
 800271c:	3001      	adds	r0, #1
 800271e:	d0e6      	beq.n	80026ee <_printf_common+0xb6>
 8002720:	f109 0901 	add.w	r9, r9, #1
 8002724:	e7d7      	b.n	80026d6 <_printf_common+0x9e>
	...

08002728 <_printf_i>:
 8002728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800272c:	4617      	mov	r7, r2
 800272e:	7e0a      	ldrb	r2, [r1, #24]
 8002730:	b085      	sub	sp, #20
 8002732:	2a6e      	cmp	r2, #110	; 0x6e
 8002734:	4698      	mov	r8, r3
 8002736:	4606      	mov	r6, r0
 8002738:	460c      	mov	r4, r1
 800273a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800273c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002740:	f000 80bc 	beq.w	80028bc <_printf_i+0x194>
 8002744:	d81a      	bhi.n	800277c <_printf_i+0x54>
 8002746:	2a63      	cmp	r2, #99	; 0x63
 8002748:	d02e      	beq.n	80027a8 <_printf_i+0x80>
 800274a:	d80a      	bhi.n	8002762 <_printf_i+0x3a>
 800274c:	2a00      	cmp	r2, #0
 800274e:	f000 80c8 	beq.w	80028e2 <_printf_i+0x1ba>
 8002752:	2a58      	cmp	r2, #88	; 0x58
 8002754:	f000 808a 	beq.w	800286c <_printf_i+0x144>
 8002758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800275c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002760:	e02a      	b.n	80027b8 <_printf_i+0x90>
 8002762:	2a64      	cmp	r2, #100	; 0x64
 8002764:	d001      	beq.n	800276a <_printf_i+0x42>
 8002766:	2a69      	cmp	r2, #105	; 0x69
 8002768:	d1f6      	bne.n	8002758 <_printf_i+0x30>
 800276a:	6821      	ldr	r1, [r4, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002772:	d023      	beq.n	80027bc <_printf_i+0x94>
 8002774:	1d11      	adds	r1, r2, #4
 8002776:	6019      	str	r1, [r3, #0]
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	e027      	b.n	80027cc <_printf_i+0xa4>
 800277c:	2a73      	cmp	r2, #115	; 0x73
 800277e:	f000 80b4 	beq.w	80028ea <_printf_i+0x1c2>
 8002782:	d808      	bhi.n	8002796 <_printf_i+0x6e>
 8002784:	2a6f      	cmp	r2, #111	; 0x6f
 8002786:	d02a      	beq.n	80027de <_printf_i+0xb6>
 8002788:	2a70      	cmp	r2, #112	; 0x70
 800278a:	d1e5      	bne.n	8002758 <_printf_i+0x30>
 800278c:	680a      	ldr	r2, [r1, #0]
 800278e:	f042 0220 	orr.w	r2, r2, #32
 8002792:	600a      	str	r2, [r1, #0]
 8002794:	e003      	b.n	800279e <_printf_i+0x76>
 8002796:	2a75      	cmp	r2, #117	; 0x75
 8002798:	d021      	beq.n	80027de <_printf_i+0xb6>
 800279a:	2a78      	cmp	r2, #120	; 0x78
 800279c:	d1dc      	bne.n	8002758 <_printf_i+0x30>
 800279e:	2278      	movs	r2, #120	; 0x78
 80027a0:	496f      	ldr	r1, [pc, #444]	; (8002960 <_printf_i+0x238>)
 80027a2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80027a6:	e064      	b.n	8002872 <_printf_i+0x14a>
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80027ae:	1d11      	adds	r1, r2, #4
 80027b0:	6019      	str	r1, [r3, #0]
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0a3      	b.n	8002904 <_printf_i+0x1dc>
 80027bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027c0:	f102 0104 	add.w	r1, r2, #4
 80027c4:	6019      	str	r1, [r3, #0]
 80027c6:	d0d7      	beq.n	8002778 <_printf_i+0x50>
 80027c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	da03      	bge.n	80027d8 <_printf_i+0xb0>
 80027d0:	222d      	movs	r2, #45	; 0x2d
 80027d2:	425b      	negs	r3, r3
 80027d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027d8:	4962      	ldr	r1, [pc, #392]	; (8002964 <_printf_i+0x23c>)
 80027da:	220a      	movs	r2, #10
 80027dc:	e017      	b.n	800280e <_printf_i+0xe6>
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027e6:	d003      	beq.n	80027f0 <_printf_i+0xc8>
 80027e8:	1d08      	adds	r0, r1, #4
 80027ea:	6018      	str	r0, [r3, #0]
 80027ec:	680b      	ldr	r3, [r1, #0]
 80027ee:	e006      	b.n	80027fe <_printf_i+0xd6>
 80027f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027f4:	f101 0004 	add.w	r0, r1, #4
 80027f8:	6018      	str	r0, [r3, #0]
 80027fa:	d0f7      	beq.n	80027ec <_printf_i+0xc4>
 80027fc:	880b      	ldrh	r3, [r1, #0]
 80027fe:	2a6f      	cmp	r2, #111	; 0x6f
 8002800:	bf14      	ite	ne
 8002802:	220a      	movne	r2, #10
 8002804:	2208      	moveq	r2, #8
 8002806:	4957      	ldr	r1, [pc, #348]	; (8002964 <_printf_i+0x23c>)
 8002808:	2000      	movs	r0, #0
 800280a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800280e:	6865      	ldr	r5, [r4, #4]
 8002810:	2d00      	cmp	r5, #0
 8002812:	60a5      	str	r5, [r4, #8]
 8002814:	f2c0 809c 	blt.w	8002950 <_printf_i+0x228>
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f020 0004 	bic.w	r0, r0, #4
 800281e:	6020      	str	r0, [r4, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13f      	bne.n	80028a4 <_printf_i+0x17c>
 8002824:	2d00      	cmp	r5, #0
 8002826:	f040 8095 	bne.w	8002954 <_printf_i+0x22c>
 800282a:	4675      	mov	r5, lr
 800282c:	2a08      	cmp	r2, #8
 800282e:	d10b      	bne.n	8002848 <_printf_i+0x120>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	07da      	lsls	r2, r3, #31
 8002834:	d508      	bpl.n	8002848 <_printf_i+0x120>
 8002836:	6923      	ldr	r3, [r4, #16]
 8002838:	6862      	ldr	r2, [r4, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	bfde      	ittt	le
 800283e:	2330      	movle	r3, #48	; 0x30
 8002840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002848:	ebae 0305 	sub.w	r3, lr, r5
 800284c:	6123      	str	r3, [r4, #16]
 800284e:	f8cd 8000 	str.w	r8, [sp]
 8002852:	463b      	mov	r3, r7
 8002854:	aa03      	add	r2, sp, #12
 8002856:	4621      	mov	r1, r4
 8002858:	4630      	mov	r0, r6
 800285a:	f7ff feed 	bl	8002638 <_printf_common>
 800285e:	3001      	adds	r0, #1
 8002860:	d155      	bne.n	800290e <_printf_i+0x1e6>
 8002862:	f04f 30ff 	mov.w	r0, #4294967295
 8002866:	b005      	add	sp, #20
 8002868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800286c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002870:	493c      	ldr	r1, [pc, #240]	; (8002964 <_printf_i+0x23c>)
 8002872:	6822      	ldr	r2, [r4, #0]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f012 0f80 	tst.w	r2, #128	; 0x80
 800287a:	f100 0504 	add.w	r5, r0, #4
 800287e:	601d      	str	r5, [r3, #0]
 8002880:	d001      	beq.n	8002886 <_printf_i+0x15e>
 8002882:	6803      	ldr	r3, [r0, #0]
 8002884:	e002      	b.n	800288c <_printf_i+0x164>
 8002886:	0655      	lsls	r5, r2, #25
 8002888:	d5fb      	bpl.n	8002882 <_printf_i+0x15a>
 800288a:	8803      	ldrh	r3, [r0, #0]
 800288c:	07d0      	lsls	r0, r2, #31
 800288e:	bf44      	itt	mi
 8002890:	f042 0220 	orrmi.w	r2, r2, #32
 8002894:	6022      	strmi	r2, [r4, #0]
 8002896:	b91b      	cbnz	r3, 80028a0 <_printf_i+0x178>
 8002898:	6822      	ldr	r2, [r4, #0]
 800289a:	f022 0220 	bic.w	r2, r2, #32
 800289e:	6022      	str	r2, [r4, #0]
 80028a0:	2210      	movs	r2, #16
 80028a2:	e7b1      	b.n	8002808 <_printf_i+0xe0>
 80028a4:	4675      	mov	r5, lr
 80028a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80028aa:	fb02 3310 	mls	r3, r2, r0, r3
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80028b4:	4603      	mov	r3, r0
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d1f5      	bne.n	80028a6 <_printf_i+0x17e>
 80028ba:	e7b7      	b.n	800282c <_printf_i+0x104>
 80028bc:	6808      	ldr	r0, [r1, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028c4:	6949      	ldr	r1, [r1, #20]
 80028c6:	d004      	beq.n	80028d2 <_printf_i+0x1aa>
 80028c8:	1d10      	adds	r0, r2, #4
 80028ca:	6018      	str	r0, [r3, #0]
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	6019      	str	r1, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <_printf_i+0x1ba>
 80028d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028d6:	f102 0004 	add.w	r0, r2, #4
 80028da:	6018      	str	r0, [r3, #0]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	d0f6      	beq.n	80028ce <_printf_i+0x1a6>
 80028e0:	8019      	strh	r1, [r3, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	4675      	mov	r5, lr
 80028e6:	6123      	str	r3, [r4, #16]
 80028e8:	e7b1      	b.n	800284e <_printf_i+0x126>
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	1d11      	adds	r1, r2, #4
 80028ee:	6019      	str	r1, [r3, #0]
 80028f0:	6815      	ldr	r5, [r2, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	6862      	ldr	r2, [r4, #4]
 80028f6:	4628      	mov	r0, r5
 80028f8:	f000 f836 	bl	8002968 <memchr>
 80028fc:	b108      	cbz	r0, 8002902 <_printf_i+0x1da>
 80028fe:	1b40      	subs	r0, r0, r5
 8002900:	6060      	str	r0, [r4, #4]
 8002902:	6863      	ldr	r3, [r4, #4]
 8002904:	6123      	str	r3, [r4, #16]
 8002906:	2300      	movs	r3, #0
 8002908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800290c:	e79f      	b.n	800284e <_printf_i+0x126>
 800290e:	6923      	ldr	r3, [r4, #16]
 8002910:	462a      	mov	r2, r5
 8002912:	4639      	mov	r1, r7
 8002914:	4630      	mov	r0, r6
 8002916:	47c0      	blx	r8
 8002918:	3001      	adds	r0, #1
 800291a:	d0a2      	beq.n	8002862 <_printf_i+0x13a>
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	079b      	lsls	r3, r3, #30
 8002920:	d507      	bpl.n	8002932 <_printf_i+0x20a>
 8002922:	2500      	movs	r5, #0
 8002924:	f104 0919 	add.w	r9, r4, #25
 8002928:	68e3      	ldr	r3, [r4, #12]
 800292a:	9a03      	ldr	r2, [sp, #12]
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	429d      	cmp	r5, r3
 8002930:	db05      	blt.n	800293e <_printf_i+0x216>
 8002932:	68e0      	ldr	r0, [r4, #12]
 8002934:	9b03      	ldr	r3, [sp, #12]
 8002936:	4298      	cmp	r0, r3
 8002938:	bfb8      	it	lt
 800293a:	4618      	movlt	r0, r3
 800293c:	e793      	b.n	8002866 <_printf_i+0x13e>
 800293e:	2301      	movs	r3, #1
 8002940:	464a      	mov	r2, r9
 8002942:	4639      	mov	r1, r7
 8002944:	4630      	mov	r0, r6
 8002946:	47c0      	blx	r8
 8002948:	3001      	adds	r0, #1
 800294a:	d08a      	beq.n	8002862 <_printf_i+0x13a>
 800294c:	3501      	adds	r5, #1
 800294e:	e7eb      	b.n	8002928 <_printf_i+0x200>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1a7      	bne.n	80028a4 <_printf_i+0x17c>
 8002954:	780b      	ldrb	r3, [r1, #0]
 8002956:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800295a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800295e:	e765      	b.n	800282c <_printf_i+0x104>
 8002960:	080030fd 	.word	0x080030fd
 8002964:	080030ec 	.word	0x080030ec

08002968 <memchr>:
 8002968:	b510      	push	{r4, lr}
 800296a:	b2c9      	uxtb	r1, r1
 800296c:	4402      	add	r2, r0
 800296e:	4290      	cmp	r0, r2
 8002970:	4603      	mov	r3, r0
 8002972:	d101      	bne.n	8002978 <memchr+0x10>
 8002974:	2000      	movs	r0, #0
 8002976:	bd10      	pop	{r4, pc}
 8002978:	781c      	ldrb	r4, [r3, #0]
 800297a:	3001      	adds	r0, #1
 800297c:	428c      	cmp	r4, r1
 800297e:	d1f6      	bne.n	800296e <memchr+0x6>
 8002980:	4618      	mov	r0, r3
 8002982:	bd10      	pop	{r4, pc}

08002984 <memmove>:
 8002984:	4288      	cmp	r0, r1
 8002986:	b510      	push	{r4, lr}
 8002988:	eb01 0302 	add.w	r3, r1, r2
 800298c:	d803      	bhi.n	8002996 <memmove+0x12>
 800298e:	1e42      	subs	r2, r0, #1
 8002990:	4299      	cmp	r1, r3
 8002992:	d10c      	bne.n	80029ae <memmove+0x2a>
 8002994:	bd10      	pop	{r4, pc}
 8002996:	4298      	cmp	r0, r3
 8002998:	d2f9      	bcs.n	800298e <memmove+0xa>
 800299a:	1881      	adds	r1, r0, r2
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	42d3      	cmn	r3, r2
 80029a0:	d100      	bne.n	80029a4 <memmove+0x20>
 80029a2:	bd10      	pop	{r4, pc}
 80029a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80029ac:	e7f7      	b.n	800299e <memmove+0x1a>
 80029ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80029b6:	e7eb      	b.n	8002990 <memmove+0xc>

080029b8 <_free_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4605      	mov	r5, r0
 80029bc:	2900      	cmp	r1, #0
 80029be:	d043      	beq.n	8002a48 <_free_r+0x90>
 80029c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c4:	1f0c      	subs	r4, r1, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfb8      	it	lt
 80029ca:	18e4      	addlt	r4, r4, r3
 80029cc:	f000 f8d4 	bl	8002b78 <__malloc_lock>
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <_free_r+0x94>)
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	4610      	mov	r0, r2
 80029d6:	b933      	cbnz	r3, 80029e6 <_free_r+0x2e>
 80029d8:	6063      	str	r3, [r4, #4]
 80029da:	6014      	str	r4, [r2, #0]
 80029dc:	4628      	mov	r0, r5
 80029de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029e2:	f000 b8ca 	b.w	8002b7a <__malloc_unlock>
 80029e6:	42a3      	cmp	r3, r4
 80029e8:	d90b      	bls.n	8002a02 <_free_r+0x4a>
 80029ea:	6821      	ldr	r1, [r4, #0]
 80029ec:	1862      	adds	r2, r4, r1
 80029ee:	4293      	cmp	r3, r2
 80029f0:	bf01      	itttt	eq
 80029f2:	681a      	ldreq	r2, [r3, #0]
 80029f4:	685b      	ldreq	r3, [r3, #4]
 80029f6:	1852      	addeq	r2, r2, r1
 80029f8:	6022      	streq	r2, [r4, #0]
 80029fa:	6063      	str	r3, [r4, #4]
 80029fc:	6004      	str	r4, [r0, #0]
 80029fe:	e7ed      	b.n	80029dc <_free_r+0x24>
 8002a00:	4613      	mov	r3, r2
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	b10a      	cbz	r2, 8002a0a <_free_r+0x52>
 8002a06:	42a2      	cmp	r2, r4
 8002a08:	d9fa      	bls.n	8002a00 <_free_r+0x48>
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	1858      	adds	r0, r3, r1
 8002a0e:	42a0      	cmp	r0, r4
 8002a10:	d10b      	bne.n	8002a2a <_free_r+0x72>
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	4401      	add	r1, r0
 8002a16:	1858      	adds	r0, r3, r1
 8002a18:	4282      	cmp	r2, r0
 8002a1a:	6019      	str	r1, [r3, #0]
 8002a1c:	d1de      	bne.n	80029dc <_free_r+0x24>
 8002a1e:	6810      	ldr	r0, [r2, #0]
 8002a20:	6852      	ldr	r2, [r2, #4]
 8002a22:	4401      	add	r1, r0
 8002a24:	6019      	str	r1, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e7d8      	b.n	80029dc <_free_r+0x24>
 8002a2a:	d902      	bls.n	8002a32 <_free_r+0x7a>
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	602b      	str	r3, [r5, #0]
 8002a30:	e7d4      	b.n	80029dc <_free_r+0x24>
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	1821      	adds	r1, r4, r0
 8002a36:	428a      	cmp	r2, r1
 8002a38:	bf01      	itttt	eq
 8002a3a:	6811      	ldreq	r1, [r2, #0]
 8002a3c:	6852      	ldreq	r2, [r2, #4]
 8002a3e:	1809      	addeq	r1, r1, r0
 8002a40:	6021      	streq	r1, [r4, #0]
 8002a42:	6062      	str	r2, [r4, #4]
 8002a44:	605c      	str	r4, [r3, #4]
 8002a46:	e7c9      	b.n	80029dc <_free_r+0x24>
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000013c 	.word	0x2000013c

08002a50 <_malloc_r>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	1ccd      	adds	r5, r1, #3
 8002a54:	f025 0503 	bic.w	r5, r5, #3
 8002a58:	3508      	adds	r5, #8
 8002a5a:	2d0c      	cmp	r5, #12
 8002a5c:	bf38      	it	cc
 8002a5e:	250c      	movcc	r5, #12
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	4606      	mov	r6, r0
 8002a64:	db01      	blt.n	8002a6a <_malloc_r+0x1a>
 8002a66:	42a9      	cmp	r1, r5
 8002a68:	d903      	bls.n	8002a72 <_malloc_r+0x22>
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	f000 f881 	bl	8002b78 <__malloc_lock>
 8002a76:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <_malloc_r+0xb4>)
 8002a78:	6814      	ldr	r4, [r2, #0]
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	b991      	cbnz	r1, 8002aa4 <_malloc_r+0x54>
 8002a7e:	4c22      	ldr	r4, [pc, #136]	; (8002b08 <_malloc_r+0xb8>)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	b91b      	cbnz	r3, 8002a8c <_malloc_r+0x3c>
 8002a84:	4630      	mov	r0, r6
 8002a86:	f000 f867 	bl	8002b58 <_sbrk_r>
 8002a8a:	6020      	str	r0, [r4, #0]
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f000 f862 	bl	8002b58 <_sbrk_r>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d126      	bne.n	8002ae6 <_malloc_r+0x96>
 8002a98:	230c      	movs	r3, #12
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	f000 f86c 	bl	8002b7a <__malloc_unlock>
 8002aa2:	e7e4      	b.n	8002a6e <_malloc_r+0x1e>
 8002aa4:	680b      	ldr	r3, [r1, #0]
 8002aa6:	1b5b      	subs	r3, r3, r5
 8002aa8:	d41a      	bmi.n	8002ae0 <_malloc_r+0x90>
 8002aaa:	2b0b      	cmp	r3, #11
 8002aac:	d90f      	bls.n	8002ace <_malloc_r+0x7e>
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	18cc      	adds	r4, r1, r3
 8002ab2:	50cd      	str	r5, [r1, r3]
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f000 f860 	bl	8002b7a <__malloc_unlock>
 8002aba:	f104 000b 	add.w	r0, r4, #11
 8002abe:	1d23      	adds	r3, r4, #4
 8002ac0:	f020 0007 	bic.w	r0, r0, #7
 8002ac4:	1ac3      	subs	r3, r0, r3
 8002ac6:	d01b      	beq.n	8002b00 <_malloc_r+0xb0>
 8002ac8:	425a      	negs	r2, r3
 8002aca:	50e2      	str	r2, [r4, r3]
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	428c      	cmp	r4, r1
 8002ad0:	bf0b      	itete	eq
 8002ad2:	6863      	ldreq	r3, [r4, #4]
 8002ad4:	684b      	ldrne	r3, [r1, #4]
 8002ad6:	6013      	streq	r3, [r2, #0]
 8002ad8:	6063      	strne	r3, [r4, #4]
 8002ada:	bf18      	it	ne
 8002adc:	460c      	movne	r4, r1
 8002ade:	e7e9      	b.n	8002ab4 <_malloc_r+0x64>
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	6849      	ldr	r1, [r1, #4]
 8002ae4:	e7ca      	b.n	8002a7c <_malloc_r+0x2c>
 8002ae6:	1cc4      	adds	r4, r0, #3
 8002ae8:	f024 0403 	bic.w	r4, r4, #3
 8002aec:	42a0      	cmp	r0, r4
 8002aee:	d005      	beq.n	8002afc <_malloc_r+0xac>
 8002af0:	1a21      	subs	r1, r4, r0
 8002af2:	4630      	mov	r0, r6
 8002af4:	f000 f830 	bl	8002b58 <_sbrk_r>
 8002af8:	3001      	adds	r0, #1
 8002afa:	d0cd      	beq.n	8002a98 <_malloc_r+0x48>
 8002afc:	6025      	str	r5, [r4, #0]
 8002afe:	e7d9      	b.n	8002ab4 <_malloc_r+0x64>
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
 8002b02:	bf00      	nop
 8002b04:	2000013c 	.word	0x2000013c
 8002b08:	20000140 	.word	0x20000140

08002b0c <_realloc_r>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	4607      	mov	r7, r0
 8002b10:	4614      	mov	r4, r2
 8002b12:	460e      	mov	r6, r1
 8002b14:	b921      	cbnz	r1, 8002b20 <_realloc_r+0x14>
 8002b16:	4611      	mov	r1, r2
 8002b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b1c:	f7ff bf98 	b.w	8002a50 <_malloc_r>
 8002b20:	b922      	cbnz	r2, 8002b2c <_realloc_r+0x20>
 8002b22:	f7ff ff49 	bl	80029b8 <_free_r>
 8002b26:	4625      	mov	r5, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2c:	f000 f826 	bl	8002b7c <_malloc_usable_size_r>
 8002b30:	4284      	cmp	r4, r0
 8002b32:	d90f      	bls.n	8002b54 <_realloc_r+0x48>
 8002b34:	4621      	mov	r1, r4
 8002b36:	4638      	mov	r0, r7
 8002b38:	f7ff ff8a 	bl	8002a50 <_malloc_r>
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d0f2      	beq.n	8002b28 <_realloc_r+0x1c>
 8002b42:	4631      	mov	r1, r6
 8002b44:	4622      	mov	r2, r4
 8002b46:	f7ff fbe7 	bl	8002318 <memcpy>
 8002b4a:	4631      	mov	r1, r6
 8002b4c:	4638      	mov	r0, r7
 8002b4e:	f7ff ff33 	bl	80029b8 <_free_r>
 8002b52:	e7e9      	b.n	8002b28 <_realloc_r+0x1c>
 8002b54:	4635      	mov	r5, r6
 8002b56:	e7e7      	b.n	8002b28 <_realloc_r+0x1c>

08002b58 <_sbrk_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4c05      	ldr	r4, [pc, #20]	; (8002b74 <_sbrk_r+0x1c>)
 8002b5e:	4605      	mov	r5, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	f7ff fb48 	bl	80021f8 <_sbrk>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d102      	bne.n	8002b72 <_sbrk_r+0x1a>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	b103      	cbz	r3, 8002b72 <_sbrk_r+0x1a>
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	200001f0 	.word	0x200001f0

08002b78 <__malloc_lock>:
 8002b78:	4770      	bx	lr

08002b7a <__malloc_unlock>:
 8002b7a:	4770      	bx	lr

08002b7c <_malloc_usable_size_r>:
 8002b7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002b80:	2800      	cmp	r0, #0
 8002b82:	f1a0 0004 	sub.w	r0, r0, #4
 8002b86:	bfbc      	itt	lt
 8002b88:	580b      	ldrlt	r3, [r1, r0]
 8002b8a:	18c0      	addlt	r0, r0, r3
 8002b8c:	4770      	bx	lr
	...

08002b90 <_init>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

08002b9c <_fini>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr
